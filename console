#!/usr/bin/bash

#GLOBAL VAR

uid=$(id -u)
userna=$(id -nu $uid)
userhome="/home/${userna}"
proghome="$userhome/Sources/Git/OpenBSD"
daterelease=$(date +"%d%m%Y%H%m%S")

if [[ $uid -ne 1000 ]]; then
	echo -e $0 "you've got to run $0 as UID=1000 \n"
	exit 1
fi

if [[ $# -eq 0 ]]; then
	echo -e $0 "have to be used with the following options \
			\n-I  -> local domain name [x]\
			\n-N  -> newhost [o]\
			\n-G  -> git pull [o]\
			\n-S  -> scripts [o] \
			\n-D  -> dyndnspop [o] \
			\n-F  -> single file update [o] \
			\n-C  -> cleanlast [o] \
			\n-RS -> repository ssh update [o] \
			\n-K  -> new IKED pk12 archive [o] \
			\n-T  -> tmux and SSH to all openbsd MESH hosts [o] \
			\n-M  -> Mikrotik RouterOS add new OpenBSD [o] \
			\n-E  -> Ubiquiti EdgeOS add new OpenBSD [o] \
			\n-P  -> Mass syspatch OpenBSD hosts [o] \
			\n-Z  -> Global network domains setup [o] \
			\n-OM -> Mikrotik RouterOS ospf-in/out filter [o] \
			\n-OE -> EdgeOS ospf-in/out filter [o] \
			\n-OO -> OpenBSD ospf filter [o] \
			\n-U  -> update the workstation's user EdDSA certificate [o] \
			\n-NO -> newospf configuration [o] \
			\n-PF -> new firewall configuration [o] \
			\n-CHR -> new RouterOS Cloud Hosted Router istance [o] \
			\n"

	exit 1
fi

localdomainname=$2


case $3 in
	"-G")
		for vpnc_host in $(dig openbsd.$localdomainname TXT +short | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
			echo -e "Connecting to $vpnc_host"
			ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 $vpnc_host.$localdomainname git -C "$proghome" pull
		done
	;;
	"-N")
		for vpnc_host in $(dig openbsd.$localdomainname TXT +short | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
			echo -e "Connecting to $vpnc_host"
			ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -t $vpnc_host.$localdomainname doas sh "/home/taglio/Sources/Git/OpenBSD/setup_node" -U newhost
		done
	;;
	"-S")
		for vpnc_host in $(dig openbsd.$localdomainname TXT +short | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
			echo -e "Connecting to $vpnc_host"
			ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -t $vpnc_host.$localdomainname doas sh "/home/taglio/Sources/Git/OpenBSD/setup_node" -U scripts
		done
	;;
	"-D")
		for vpnc_host in $(dig openbsd.$localdomainname TXT +short | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
			echo -e "Connecting to $vpnc_host"
			ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -t $vpnc_host.$localdomainname doas sh "/home/taglio/Sources/Git/OpenBSD/setup_node" -U dyndnspop
			sleep 10
		done
	;;
	"-PF")
		for vpnc_host in $(dig openbsd.$localdomainname TXT +short | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
			echo -e "Connecting to $vpnc_host"
			ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -t $vpnc_host.$localdomainname doas sh "/home/taglio/Sources/Git/OpenBSD/setup_node" -U pf
			sleep 10
		done
	;;
	"-F")
		for vpnc_host in $(dig openbsd.$localdomainname TXT +short | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
			echo -e "Connecting to $vpnc_host"
			ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -t $vpnc_host.$localdomainname doas sh "/home/taglio/Sources/Git/OpenBSD/setup_node" -U file
			sleep 10
		done
	;;
	"-C")
		for vpnc_host in $(dig openbsd.$localdomainname TXT +short | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
			echo -e "Connecting to $vpnc_host"
			ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -t $vpnc_host.$localdomainname doas sh "/home/taglio/Sources/Git/OpenBSD/setup_node" -A cleanlast
		done
	;;
	"-P")
		for vpnc_host in $(dig openbsd.$localdomainname TXT +short | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
			echo -e "Connecting to $vpnc_host"
			ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -t $vpnc_host.$localdomainname doas syspatch
		done
	;;
	"-RS")
		lanhost=
		while [ -z $lanhost ]
		do
			echo 'Type the LAN hostname '
			read lanhost
		done
		pubhost=
		while [ -z $pubhost ]
		do
			echo 'Type the public hostname '
			read pubhost
		done
		hash=
		while [ -z $hash ]
		do
			echo 'Type the ED25519 hash '
			read hash
		done
		if [[ $(grep -c $lanhost src/etc/ssh/remote_install/authorized_keys) -gt 0 ]]; then
			for linenum in $(grep -n $lanhost src/etc/ssh/remote_install/authorized_keys | cut -d : -f1); do
				sed -i "$linenum"d src/etc/ssh/remote_install/authorized_keys
			done
		fi

		echo "ssh-ed25519 $hash root@$lanhost" >> src/etc/ssh/remote_install/authorized_keys
		#	if [[ $(grep -c $pubhost src/etc/ssh/ssh_known_hosts) -gt 0 ]]; then
		#		for linenum in $(grep -n $pubhost src/etc/ssh/ssh_known_hosts | cut -d : -f1); do
		#			sed -i "$linenum"d src/etc/ssh/ssh_known_hosts
		#		done
		#	fi
		#
		#	echo "# $pubhost:31137 SSH-2.0-OpenSSH_8.6" >> src/etc/ssh/ssh_known_hosts
		#	echo "[$pubhost]:31137 ssh-ed25519 $hash" >> src/etc/ssh/ssh_known_hosts
		echo -e "remote_install/authorized_keys and ssh_known_hosts UPDATED
		\n please use git_openbsd.sh to update the public GIT"
	;;
	"-K")
		ikedpub=
		while [ -z $ikedpub ]
		do
			echo 'Type the PATH to the new iked PK12 file '
			read ikedpub
		done
		tmpdir=$(mktemp -d)
		pk12=$(basename $ikedpub)
		publichost=$(echo $pk12 | sed 's/.p12//')
		publichostname=$(echo $publichost | cut -d . -f1)
		domainname=$(echo $publichost | sed "s/$publichostname.//")


		for a in $(dig ipsec20591.$domainname TXT +short @8.8.8.8 | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
			b=$(echo $a | cut -d : -f1)
			if [[ "$b" -eq "$publichostname" ]]; then
				srcid=$(echo $a | cut -d : -f2)
			fi
		done
		ssh-keygen -f "${userhome}/.ssh/known_hosts" -R "$publichost"
		scp $ikedpub "${userna}@$publichost:/tmp"
		openssl pkcs12 -nodes -in $ikedpub -nocerts -passin pass:123456789 -passout pass:123456789 -out "$tmpdir/local.key"
		openssl pkcs12 -nodes -in $ikedpub -clcerts -nokeys -passin pass:123456789 -passout pass:123456789 -out "$tmpdir/new.crt"
		openssl x509 -pubkey -noout -passin pass:123456789 -in "$tmpdir/new.crt"  > src/etc/iked/pubkeys/ufqdn/"$srcid@ca.$domainname"
		rm -rf $tmpdir
		echo -e "$srcid@ca.$domainname created please update repository and all the others Openbsd hosts"
	;;
	"-T")
		echo -e "Launching TMUX"
		tmux new-session -d -s "LOBBY"
		for vpnc_host in $(dig openbsd.$localdomainname TXT +short | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
			echo -e "Creating $vpnc_host TMUX windows"
			tmux rename-window "$vpnc_host"
			tmux send -t "LOBBY:$vpnc_host" ssh SPACE "$vpnc_host.$localdomainname" ENTER
			tmux new-window
		done
		tmux rename-window "CA"
		tmux send -t "LOBBY:CA" ssh SPACE "ca.$localdomainname" ENTER
		tmux new-window
		tmux rename-window $(hostname -s)
		tmux -2 attach-session -t "LOBBY"
	;;
	"-M")
		mkhost=
		while [ -z $mkhost ]
		do
			echo 'Type the Mikrotik internal hostname '
			read mkhost
		done
		openbsd=
		while [ -z $openbsd ]
		do
			echo 'Type the new OpenBSD internal hostname '
			read openbsd
		done
		mkaddr=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q admin@$mkhost /ip addr pr where dynamic | awk '{print $3}' | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b")
		mkpublichost=$(dig -x $mkaddr +short @8.8.8.8 | sed 's/.$//')
		wget "http://$openbsd.$2/$mkpublichost/$mkpublichost.rsc" -O "/tmp/$mkpublichost.rsc"
		scp "/tmp/$mkpublichost.rsc" "admin@$mkhost:/$mkpublichost.rsc"
		ssh admin@$mkhost /import file-name=$mkpublichost.rsc
		echo -e "Host $openbsd.$2 configured into Mikrotik $mkhost.$2"
		ssh admin@$mkhost /sys package update check-for-updates
	;;
	"-E")
		edgehost=
		while [ -z $edgehost ]
		do
			echo 'Type the EdgeOS external hostname '
			read edgehost
		done
		openbsd=
		while [ -z $openbsd ]
		do
			echo 'Type the new OpenBSD internal hostname '
			read openbsd
		done
		publicip=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q $openbsd.$localdomainname ifconfig egress | awk 'FNR == 7' | awk '{print $2}')
		publichost=$(dig -x $publicip +short |  sed 's/.$//' | cut -d . -f1)
		publicdomainname=$(dig -x $publicip +short | sed "s/$publichost.//" | sed 's/.$//')
		publichostname=$(echo $edgehost | sed "s/.$publicdomainname//")
		for edge_host in $(dig edgeos.$localdomainname TXT +short | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
			publicedgehost=$(echo $edge_host | cut -d : -f2)
			if [[ $publichostname = $publicedgehost ]]; then
				edgeos=$(echo $edge_host | cut -d : -f1)
			fi
		done
		wget "http://$openbsd.$2/$edgehost.tar" -O "/tmp/$edgehost.tar"
		cd /tmp
		if [[ ! -d "$edgehost" ]]; then
			mkdir "$edgehost"
		fi
		tar xvf "/tmp/$edgehost.tar" -C "/tmp/$edgehost"
		cd $edgehost
		for file in $(ls .); do
			if [[ $file = "gre.sh" || $file = "ospf.sh" || $file = "ipsec.sh" ]]; then
				cat $file | ssh -q $edgeos
			elif [[ $file = *updown.sh ]]; then
				a=$(echo $file | sed "s/-updown.sh//")
				c=$(echo $a | sed "s/-//")
				v=$(echo $file | sed "s/$a/$c/")
				scp -q $file "$edgeos:/tmp"
				ssh -q $edgeos "sudo mv /tmp/$file /config/ipsec/$v ; chmod +x /config/ipsec/$v"
			elif [[ $file = *_netwatch.sh ]]; then
				a=$(echo $file | sed "s/_netwatch.sh//")
				c=$(echo $a | sed "s/-//")
				v=$(echo $file | sed "s/$a/$c/")
				scp -q $file "$edgeos:/tmp"
				ssh -q $edgeos "sudo mv /tmp/$file /config/scripts/$v; chmod +x /config/scripts/$v"
			elif [[ $file = *.crt ]]; then
				scp -q $file "$edgeos:/tmp"
				ssh -q $edgeos sudo cp "/tmp/$file" /config/auth; sudo mv "/tmp/$file" /etc/ipsec.d/certs/
			elif [[ $file = *.conf ]]; then
				if [[ $(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q $edgeos grep -c telecomlobby-$(head -n 1 $file | cut -d \- -f2) /config/ipsec.conf) -eq 0 ]]; then
					cat $file | ssh -qt $edgeos "cat - >> /config/ipsec.conf"
				fi
			fi
		done
		ssh -q $edgeos echo "cp /config/auth/$publichostname.crt /etc/ipsec.d/certs/" >> /config/scripts/post-config.d/files.sh
		ctrl=
		while [ -z $ctrl ]
		do
			echo "Do you want to restart ipsec into $edgeos "
			read ctrl
		done
		rm -rf "/tmp/$edgehost"
		case $ctrl in
			"yes")
				ssh -q $edgeos restart vpn
			;;
			"no")
			;;
			*)
				echo 'Reply yes or no'
			;;
		esac

	;;
	"-Z")
		comdomains=
		echo -e "Type the two .com domains (the principle and the secondary) divided by a comma: "
		read comdomains
		principledomain=$(printf $comdomains | cut -d , -f1)
		secondarydomain=$(printf $comdomains | cut -d , -f2)
		for domain in $(printf "$comdomains" | xargs -d, -n1); do
			echo -e "\n$domain: "
			whois $domain | grep "Name Server" | grep -v "^Name"
			dnssec=$(whois $domain| grep DNSSEC | grep -c "unsigned")
			[[ $dnssec > 0 ]] && echo -e "\nDNSSEC not enable onto $domain!" || echo -e "\nDNSSEC enabled onto $domain!"
			echo "<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>"
		done
		echo -e "You've got servers in:\n"
		for vpnc_host in $(dig openbsd.$localdomainname TXT +short | sed "s/\"//g" | tr \; '\n' | sed '$d'); do

			local=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q $vpnc_host.$localdomainname readlink /etc/localtime  | sed "s/\/usr\/share\/zoneinfo\///")
			zonetab=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q $vpnc_host.$localdomainname cat /usr/share/zoneinfo/zone.tab | grep $local)
			[[ $zonetab ]] && echo -e "\n$zonetab\n" || echo -e "\n$local\n"
			publicip=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q $vpnc_host.$localdomainname ifconfig egress | grep inet |grep -v inet6 | cut -d ' ' -f2)
			curl -s "http://ipinfo.io/$publicip" | sed '/readme/d'
			loc=$(curl -s "http://ipinfo.io/$publicip" | grep loc | awk '{print $2}' | sed 's/.$//' | sed "s/\"//g")
			long=$(echo $loc | cut -d , -f2 | cut -d . -f1)
			lat=$(echo $loc | cut -d , -f1 | cut -d . -f1)
			country=$(curl -s "http://ipinfo.io/$publicip" | grep country | awk '{print $2}' | sed 's/.$//' | sed "s/\"//g")
			continent=$(grep "${country}" cndb/* | cut -d / -f2 | cut -d : -f1)
			echo -e "\nLAT --> $lat"
			echo -e "LONG --> $long\n"
			if [[ $long -ge -180 && $long -le -60 && $lat -ge 0 ]]; then group=12 && ospfarea="0.0.1.2" && G12+=("$vpnc_host"); fi
			if [[ $long -ge -60 && $long -le 60 && $lat -ge 0 ]]; then group=34 && ospfarea="0.0.3.4" && G34+=("$vpnc_host"); fi
			if [[ $long -ge 60 && $long -le 180 && $lat -ge 0 ]]; then group=56 && ospfarea="0.0.5.6" && G56+=("$vpnc_host"); fi
			if [[ $long -ge -180 && $long -le -60 && $lat -le 0 ]]; then group=12 && ospfarea="0.0.1.2" && G12+=("$vpnc_host"); fi
			if [[ $long -ge -60 && $long -le 60 && $lat -le 0 ]]; then group=34 && ospfarea="0.0.3.4" && G34+=("$vpnc_host"); fi
			if [[ $long -ge 60 && $long -le 180 && $lat -le 0 ]]; then group=56 && ospfarea="0.0.5.6" && G56+=("$vpnc_host"); fi
			echo -e "GROUP --> $group"
			echo -e "BACKBONE OSPFAREA 0.0.0.0"
			echo -e "GEO OSPFAREA --> $ospfarea"
			echo -e "CONTINENT --> $continent\n"
		done
		[[ ${#G12[@]} > 1 ]] && rand12p=$[$RANDOM % ${#G12[@]}] || rand12p="${G12[0]}"
		[[ ${#G34[@]} > 1 ]] && rand34p=$[$RANDOM % ${#G34[@]}] || rand34p="${G34[0]}"
		[[ ${#G56[@]} > 1 ]] && rand56p=$[$RANDOM % ${#G56[@]}] || rand56p="${G56[0]}"
		echo -e "The master PowerDNS server for $principledomain in the group 34 is ${G34[$rand34p]} in the group 12 is ${G12[$rand12p]} and in the group 56 is ${G56[$rand56p]}"
		publicip=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q ${G34[$rand34p]}.$localdomainname ifconfig egress | grep inet |grep -v inet6 | cut -d ' ' -f2)
		nsd34p=$(curl -s "http://ipinfo.io/$publicip" | grep hostname | awk '{print $2}' | sed 's/.$//' | sed "s/\"//g" | sed "s/$principledomain/$secondarydomain/" | tr '[:lower:]' '[:upper:]')
		routerid34p=$(dig "${G34[$rand34p]}.$localdomainname" A +short)
		publicip=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q ${G12[$rand12p]}.$localdomainname ifconfig egress | grep inet |grep -v inet6 | cut -d ' ' -f2)
		nsd12p=$(curl -s "http://ipinfo.io/$publicip" | grep hostname | awk '{print $2}' | sed 's/.$//' | sed "s/\"//g" | sed "s/$principledomain/$secondarydomain/" | tr '[:lower:]' '[:upper:]')
		routerid12p=$(dig "${G12[$rand12p]}.$localdomainname" A +short)
		publicip=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q ${G56[$rand56p]}.$localdomainname ifconfig egress | grep inet |grep -v inet6 | cut -d ' ' -f2)
		nsd56p=$(curl -s "http://ipinfo.io/$publicip" | grep hostname | awk '{print $2}' | sed 's/.$//' | sed "s/\"//g" | sed "s/$principledomain/$secondarydomain/" | tr '[:lower:]' '[:upper:]')
		routerid56p=$(dig "${G56[$rand56p]}.$localdomainname" A +short)
		#masterp34slave12=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G34[$rand34p]}.$localdomainname" ospfctl show fib | grep "$routerid12p" | awk '{print $4}')
		#masterp34gre12=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G34[$rand34p]}.$localdomainname" ifconfig | grep $masterp34slave12 | awk '{print $2}')
		#masterp34slave56=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G34[$rand34p]}.$localdomainname" ospfctl show fib | grep "$routerid56p" | awk '{print $4}')
		#masterp34gre56=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G34[$rand34p]}.$localdomainname" ifconfig | grep $masterp34slave56 | awk '{print $2}')
		#slavep12master34=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G12[$rand12p]}.$localdomainname" ospfctl show fib | grep "$routerid34p" | awk '{print $4}')
		#slavep12gre34=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G12[$rand12p]}.$localdomainname" ifconfig | grep $slavep12master34 | awk '{print $2}')
		#slavep56master34=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G56[$rand56p]}.$localdomainname" ospfctl show fib | grep "$routerid34p" | awk '{print $4}')
		#slavep56gre34=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G56[$rand56p]}.$localdomainname" ifconfig | grep $slavep56master34 | awk '{print $2}')
		epoch=$(date +%s)
		if [[ ! -e "../db/domains.sqlite3" ]]; then
			echo -e "initialize sqlite3 domains local database"
			sqlite3 "../db/domains.sqlite3" < "src/openbsd/db.sql"

		else
			echo -e "erasing and initializing sqlite3 domains local database"
			sqlite3 "../db/domains.sqlite3" "DROP TABLE domains;"
			sqlite3 "../db/domains.sqlite3" < "src/openbsd/db.sql"
		fi
		sqlite3 "../db/domains.sqlite3" "INSERT INTO domains (name,ns34,ns12,ns56,last_update)  values (\"$principledomain\",\"$routerid34p\",\"$routerid12p\",\"$routerid56p\",$epoch);"
		if [ $dnssec = 0 ]; then
			dnssec_keyid=$(whois "${principledomain}" | grep DNSSEC\ DS | awk '{print $4}' | head -n 1)
			sqlite3 "../db/domains.sqlite3" "UPDATE domains SET dnssec = 0, dnssec_keyid = ${dnssec_keyid} WHERE name = ${principledomain};"
		fi
		echo -e "Please configure WHOIS server for $principledomain with:"
		printf '%s\n' $nsd34p
		printf '%s\n' $nsd12p
		printf '%s\n' $nsd56p
		echo -e "Useful PowerDNS parameters:"
		printf '%s\t%s\t%s\n' $routerid34p #$masterp34gre12 $masterp34gre56
		printf '%s\t%s\n' $routerid12p #$slavep12gre34
		printf '%s\t%s\n' $routerid56p #$slavep56gre34
		[[ ${#G12[@]} > 1 ]] && rand12s=$[$RANDOM % ${#G12[@]}] || rand12s="${G12[0]}"
		[[ ${#G34[@]} > 1 ]] && rand34s=$[$RANDOM % ${#G34[@]}] || rand34s="${G34[0]}"
		[[ ${#G56[@]} > 1 ]] && rand56s=$[$RANDOM % ${#G56[@]}] || rand56s="${G56[0]}"
		echo -e "The master PowerDNS server for $secondarydomain in the group 34 is ${G34[$rand34s]} slaves are in the group 12 ${G12[$rand12s]} and in the group 56 ${G56[$rand56s]}"
		publicip=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q ${G34[$rand34s]}.$localdomainname ifconfig egress | grep inet |grep -v inet6 | cut -d ' ' -f2)
		nsd34s=$(curl -s "http://ipinfo.io/$publicip" | grep hostname | awk '{print $2}' | sed 's/.$//' | sed "s/\"//g" | tr '[:lower:]' '[:upper:]')
		routerid34s=$(dig "${G34[$rand34s]}.$localdomainname" A +short)
		publicip=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q ${G12[$rand12s]}.$localdomainname ifconfig egress | grep inet |grep -v inet6 | cut -d ' ' -f2)
		nsd12s=$(curl -s "http://ipinfo.io/$publicip" | grep hostname | awk '{print $2}' | sed 's/.$//' | sed "s/\"//g" | tr '[:lower:]' '[:upper:]')
		routerid12s=$(dig "${G12[$rand12s]}.$localdomainname" A +short)
		publicip=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q ${G56[$rand56s]}.$localdomainname ifconfig egress | grep inet |grep -v inet6 | cut -d ' ' -f2)
		nsd56s=$(curl -s "http://ipinfo.io/$publicip" | grep hostname | awk '{print $2}' | sed 's/.$//' | sed "s/\"//g" | tr '[:lower:]' '[:upper:]')
		routerid56s=$(dig "${G56[$rand56s]}.$localdomainname" A +short)
		#masters34slave12=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G34[$rand34s]}.$localdomainname" ospfctl show fib | grep "$routerid12s" | awk '{print $4}')
		#masters34gre12=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G34[$rand34s]}.$localdomainname" ifconfig | grep $masters34slave12 | awk '{print $2}')
		#masters34slave56=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G34[$rand34s]}.$localdomainname" ospfctl show fib | grep "$routerid56s" | awk '{print $4}')
		#masters34gre56=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G34[$rand34s]}.$localdomainname" ifconfig | grep $masters34slave56 | awk '{print $2}')
		#slaves12master34=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G12[$rand12s]}.$localdomainname" ospfctl show fib | grep "$routerid34s" | awk '{print $4}')
		#slaves12gre34=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G12[$rand12s]}.$localdomainname" ifconfig | grep $slaves12master34 | awk '{print $2}')
		#slaves56master34=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G56[$rand56s]}.$localdomainname" ospfctl show fib | grep "$routerid34s" | awk '{print $4}')
		#slaves56gre34=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q "${G56[$rand56s]}.$localdomainname" ifconfig | grep $slaves56master34 | awk '{print $2}')
		echo -e "Please configure WHOIS server for $secondarydomain with:"
		printf '%s\n' $nsd34s
		printf '%s\n' $nsd12s
		printf '%s\n' $nsd56s
		echo -e "Useful PowerDNS parameters:"
		printf '%s\t%s\t%s\n' $routerid34s #$masters34gre12 $masters34gre56
		printf '%s\t%s\n' $routerid12s #$slaves12gre34
		printf '%s\t%s\n' $routerid56s #$slaves56gre34
		tsig256s=$(dd if=/dev/urandom of=/dev/stdout count=1 bs=64 status=none | openssl base64)
		tmpupload=$(mktemp)
		ctrl=
		while true; do
			read -p "Start configuring $secondarydomain onto native PowerDNS on ${G34[$rand34s]}? yes/no: " ctrl
			case $ctrl in
				[yY]*)
					echo $routerid12s > $tmpupload && echo $routerid56s >> $tmpupload && echo ${tsig256s} | tr -d ' ' >> $tmpupload && echo $secondarydomain >> $tmpupload
					scp $tmpupload "${G34[$rand34s]}.$localdomainname:/tmp/powernsd_distributed"
					ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -t "${G34[$rand34s]}.$localdomainname"  doas sh "/home/taglio/Sources/Git/OpenBSD/setup_node" -D powerdns #distributed
					break
				;;
				[nN]*)
					echo 'Ok, going ahead'
					break
				;;
				*)
					echo 'Invalid input' >&2
			esac
		done
		ctrl=
		while true; do
			read -p "Continue with configuring $secondarydomain onto native PowerDNS on ${G12[$rand12s]}? yes/no: " ctrl
			case $ctrl in
				[yY]*)
					echo $masters34slave12 > $tmpupload && echo ${tsig256s} | tr -d ' ' >> $tmpupload && echo $secondarydomain >> $tmpupload
					scp $tmpupload "${G12[$rand12s]}.$localdomainname:/tmp/powerdns_distributed"
					ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -t "${G12[$rand12s]}.$localdomainname"  doas sh "/home/taglio/Sources/Git/OpenBSD/setup_node" -D powerdns #distributed
					break
				;;
				[nN]*)
					echo 'Ok, going ahead'
					break
				;;
				*)
					echo 'Invalid input' >&2
			esac
		done
		ctrl=
		while true; do
			read -p "Continue with configuring $secondarydomain onto native PowerDNS on ${G56[$rand56s]}? yes/no: " ctrl
			case $ctrl in
				[yY]*)
					echo $masters34slave56 > $tmpupload && echo ${tsig256s} | tr -d ' ' >> $tmpupload && echo $secondarydomain >> $tmpupload
					scp $tmpupload "${G56[$rand56s]}.$localdomainname:/tmp/powernsd_distributed"
					ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -t "${G56[$rand56s]}.$localdomainname"  doas sh "/home/taglio/Sources/Git/OpenBSD/setup_node" -D powerdns #distributed
					break
				;;
				[nN]*)
					echo 'Ok, going ahead'
					break
				;;
				*)
					echo 'Invalid input' >&2
			esac
		done
		echo -e "Secondary domain $secondarydomain configured"
	;;
	"-OM")
		mk=
		echo -e "Type the internal hostname of the Mikrotik: "
		read mk
		for ((x=0 ; x<255 ;)); do
			for ((y=0 ; y<4; )); do
				[[ $x < 255 ]] && \
					case $y in
						0)
							ssh -q admin@$mk "/routing filter add action=discard address-family=ip chain=ospf-in ospf-type=intra-area prefix=10.10.10.$x prefix-length=30 protocol=ospf"
							ssh -q admin@$mk "/routing filter add action=discard address-family=ip chain=ospf-out ospf-type=intra-area prefix=10.10.10.$x prefix-length=30 protocol=ospf  match-chain=ospf-out"
						;;
						3)
						;;
						*)
							ssh -q admin@$mk "/routing filter add action=discard address-family=ip chain=ospf-in ospf-type=intra-area prefix=10.10.10.$x protocol=ospf"
							ssh -q admin@$mk "/routing filter add action=discard address-family=ip chain=ospf-out ospf-type=intra-area prefix=10.10.10.$x protocol=ospf match-chain=ospf-out"
						;;
					esac
				let x+=1
				let y+=1
			done
		done
	;;
	"-OE")
		edgeos=
		echo -e "Type the internal hostname of the EdgeOS: "
		read edgeos
		edgescript=$(mktemp)
		echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper begin" > $edgescript
		echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113" >> $edgescript
		echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 description OSPF-IN" >> $edgescript
		#echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 131" >> $edgescript
		#echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 131 description OSPF-OUT" >> $edgescript
		for ((x=0 ; x<=255 ;)); do
			for ((y=0 ; y<4; )); do
				[[ $x < 255 ]] && \

					case $y in
						0)
							echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+1)) action deny" >> $edgescript
							#echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 131 rule $((x+1)) action deny" >> $edgescript
							echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+1)) destination inverse-mask 252.255.255.255" >> $edgescript
							echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+1)) destination network 10.10.10.$x" >> $edgescript
							echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+1)) source any" >> $edgescript
							#echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 131 rule $((x+1)) destination inverse-mask 252.255.255.255" >> $edgescript
							#echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 131 rule $((x+1)) destination network 10.10.10.$x" >> $edgescript
						;;
						3)
						;;
						*)
							echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+1)) action deny" >> $edgescript
							#echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 131 rule $((x+1)) action deny" >> $edgescript
							echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+1)) destination host 10.10.10.$x" >> $edgescript
							#echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 131 rule $((x+1)) destination host 10.10.10.$x" >> $edgescript
							echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+1)) source any" >> $edgescript
						;;
					esac


				let x+=1
				let y+=1
			done
		done
		echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+10)) action permit" >> $edgescript
		#echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 131 rule $((x+10)) action permit" >> $edgescript
		echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+10)) destination any" >> $edgescript
		echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+10)) source any" >> $edgescript
		#echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 131 rule $((x+10)) destination any" >> $edgescript
		echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper commit" >> $edgescript
		echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper save" >> $edgescript

		cat $edgescript | grep -v "rule 256"
	;;
	"-OO")
		ospfdconf=$(mktemp)
		for ((x=0 ; x<=255 ;)); do
			for ((y=0 ; y<4; )); do
				[[ $x < 255 ]] && \

					case $y in
						0)
							echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+1)) action deny" >> $edgescript
							#echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 131 rule $((x+1)) action deny" >> $edgescript
							echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+1)) destination inverse-mask 252.255.255.255" >> $edgescript
							echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+1)) destination network 10.10.10.$x" >> $edgescript
							echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+1)) source any" >> $edgescript
							#echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 131 rule $((x+1)) destination inverse-mask 252.255.255.255" >> $edgescript
							#echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 131 rule $((x+1)) destination network 10.10.10.$x" >> $edgescript
						;;
						3)
						;;
						*)
							echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+1)) action deny" >> $edgescript
							#echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 131 rule $((x+1)) action deny" >> $edgescript
							echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+1)) destination host 10.10.10.$x" >> $edgescript
							#echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 131 rule $((x+1)) destination host 10.10.10.$x" >> $edgescript
							echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set policy access-list 113 rule $((x+1)) source any" >> $edgescript
						;;
					esac


				let x+=1
				let y+=1
			done
		done
	;;
	"-U")
		if [[ ! -d "$HOME/.ssh/Backup$daterelease" ]]; then
			mkdir "$HOME/.ssh/Backup$daterelease"
		else
			rm -rf "$HOME/.ssh/Backup$daterelease"
			mkdir "$HOME/.ssh/Backup$daterelease"
		fi
		if [[ -e "$HOME/.ssh/id_ed25519" ]]; then
			mv $HOME/.ssh/{id_ed25519,id_ed25519.pub,id_ed25519-cert.pub} "$HOME/.ssh/Backup$daterelease"
		fi
		ssh-keygen -t ed25519 -C "taglio@$localdomainname"
		pwdfile=$(mktemp)
		# Read Password
		password=$(systemd-ask-password "Enter CA password: ")
		# Run Command
		echo $password > $pwdfile
		echo -n Type the mounted FAT32 pen drive directory:
		read fat32pen
		if [[ ! -d "$fat32pen" ]]; then
			mkdir "$fat32pen/CA_update"
		else
			rm -rf  "$fat32pen/CA_update"
			mkdir "$fat32pen/CA_update"
		fi
		cp "$HOME/.ssh/id_ed25519.pub" "$fat32pen/CA_update"
		cp  $pwdfile "$fat32pen/CA_update/capwd.txt"
		srm $pwdfile
		umount $fat32pen
		ctrl=
		while [ -z $ctrl ]
		do
			echo -e "Ready? type 1 "
			read ctrl
		done
		cp "$fat32pen/CA_update/id_ed25519-cert.pub" "$HOME/.ssh/"
		srm "$fat32pen/CA_update/"
	;;
	"-NO")
		for vpnc_host in $(dig openbsd.$localdomainname TXT +short | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
			echo -e "Connecting to $vpnc_host"
			ssh -t $vpnc_host.$localdomainname doas sh "/home/taglio/Sources/Git/OpenBSD/setup_node" -U newospf
		done
		mk=
		echo -e "Type the internal hostname of the Mikrotik: "
		read mk
		mkscript=$(mktemp)
		mkpubip=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q admin@$mk /ip addr pr where dynamic | awk '{print $3}' | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b")
		loc=$(curl -s "http://ipinfo.io/$mkpubip" | grep loc | awk '{print $2}' | sed 's/.$//' | sed "s/\"//g")
		long=$(echo $loc | cut -d , -f2 | cut -d . -f1)
		lat=$(echo $loc | cut -d , -f1 | cut -d . -f1)
		echo -e "\nLAT --> $lat"
		echo -e "LONG --> $long\n"
		if [[ $long -ge -180 && $long -le -60 && $lat -ge 0 ]]; then group=12 && ospfarea="0.0.1.2"; fi
		if [[ $long -ge -60 && $long -le 60 && $lat -ge 0 ]]; then group=34 && ospfarea="0.0.3.4"; fi
		if [[ $long -ge 60 && $long -le 180 && $lat -ge 0 ]]; then group=56 && ospfarea="0.0.5.6"; fi
		if [[ $long -ge -180 && $long -le -60 && $lat -le 0 ]]; then group=12 && ospfarea="0.0.1.2"; fi
		if [[ $long -ge -60 && $long -le 60 && $lat -le 0 ]]; then group=34 && ospfarea="0.0.3.4"; fi
		if [[ $long -ge 60 && $long -le 180 && $lat -le 0 ]]; then group=56 && ospfarea="0.0.5.6"; fi
		echo "/routing ospf area add name=$group area-id=$ospfarea" > $mkscript
		for grepubip in $(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q admin@$mk /interface gre pr | grep remote-address | awk '{print $1}' | cut -d \= -f2); do
			grenetwork=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q admin@$mk "/ip address print where interface=[/interface get [/interface gre find where remote-address=$grepubip] name];" | awk '{print $3}' | awk 'FNR == 3')"/30"
			remoteloc=$(curl -s "http://ipinfo.io/$grepubip" | grep loc | awk '{print $2}' | sed 's/.$//' | sed "s/\"//g")
			remotelong=$(echo $remoteloc | cut -d , -f2 | cut -d . -f1)
			remotelat=$(echo $remoteloc | cut -d , -f1 | cut -d . -f1)
			if [[ $remotelong -ge -180 && $remotelong -le -60 && $remotelat -ge 0 ]]; then remotegroup=12 ; fi
			if [[ $remotelong -ge -60 && $remotelong -le 60 && $remotelat -ge 0 ]]; then remotegroup=34 ; fi
			if [[ $remotelong -ge 60 && $remotelong -le 180 && $remotelat -ge 0 ]]; then remotegroup=56 ; fi
			if [[ $remotelong -ge -180 && $remotelong -le -60 && $remotelat -le 0 ]]; then remotegroup=12 ; fi
			if [[ $remotelong -ge -60 && $remotelong -le 60 && $remotelat -le 0 ]]; then remotegroup=34 ; fi
			if [[ $remotelong -ge 60 && $remotelong -le 180 && $remotelat -le 0 ]]; then remotegroup=56 ; fi
			[[ $group = $remotegroup ]] && \
				echo "/routing ospf network set network=\"$grenetwork\" area=$group" >> $mkscript
		done
		cat $mkscript
		#scp $mkscript "admin@$mk:/newospfd.rsc"
		ssh admin@$mk /import file-name=newospfd.rsc
		edgeos=
		echo -e "Type the internal hostname of the EdgeOS: "
		read edgeos
		edgescript=$(mktemp)
		auxscript=$(mktemp)
		edgepublicip=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q $edgeos /sbin/ip addr show dev pppoe0 | awk 'FNR == 3' | awk {'print $2'})
		loc=$(curl -s "http://ipinfo.io/$edgepublicip" | grep loc | awk '{print $2}' | sed 's/.$//' | sed "s/\"//g")
		long=$(echo $loc | cut -d , -f2 | cut -d . -f1)
		lat=$(echo $loc | cut -d , -f1 | cut -d . -f1)
		echo -e "\nLAT --> $lat"
		echo -e "LONG --> $long\n"
		if [[ $long -ge -180 && $long -le -60 && $lat -ge 0 ]]; then group=12 && ospfarea="0.0.1.2"; fi
		if [[ $long -ge -60 && $long -le 60 && $lat -ge 0 ]]; then group=34 && ospfarea="0.0.3.4"; fi
		if [[ $long -ge 60 && $long -le 180 && $lat -ge 0 ]]; then group=56 && ospfarea="0.0.5.6"; fi
		if [[ $long -ge -180 && $long -le -60 && $lat -le 0 ]]; then group=12 && ospfarea="0.0.1.2"; fi
		if [[ $long -ge -60 && $long -le 60 && $lat -le 0 ]]; then group=34 && ospfarea="0.0.3.4"; fi
		if [[ $long -ge 60 && $long -le 180 && $lat -le 0 ]]; then group=56 && ospfarea="0.0.5.6"; fi
		echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper begin" > $edgescript
		for tunedge in $(ssh -q $edgeos /sbin/ip link | grep tun | awk {'print $2'} | sed "s/@NONE://"); do
			tunpublicip=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q $edgeos /sbin/ip link list dev $tunedge | awk 'FNR == 2' | awk '{print $4}')
			tunprivateip=$(ssh -o ConnectTimeout=1 -o ConnectionAttempts=1 -q $edgeos /sbin/ip addr show dev $tunedge | awk 'FNR == 3' | awk '{print $2}')
			tunnetwork=$(ipcalc -c $tunprivateip | grep Network | awk '{print $2}')
			remoteloc=$(curl -s "http://ipinfo.io/$tunpublicip" | grep loc | awk '{print $2}' | sed 's/.$//' | sed "s/\"//g")
			remotelong=$(echo $remoteloc | cut -d , -f2 | cut -d . -f1)
			remotelat=$(echo $remoteloc | cut -d , -f1 | cut -d . -f1)
			if [[ $remotelong -ge -180 && $remotelong -le -60 && $remotelat -ge 0 ]]; then remotegroup=12 ; fi
			if [[ $remotelong -ge -60 && $remotelong -le 60 && $remotelat -ge 0 ]]; then remotegroup=34 ; fi
			if [[ $remotelong -ge 60 && $remotelong -le 180 && $remotelat -ge 0 ]]; then remotegroup=56 ; fi
			if [[ $remotelong -ge -180 && $remotelong -le -60 && $remotelat -le 0 ]]; then remotegroup=12 ; fi
			if [[ $remotelong -ge -60 && $remotelong -le 60 && $remotelat -le 0 ]]; then remotegroup=34 ; fi
			if [[ $remotelong -ge 60 && $remotelong -le 180 && $remotelat -le 0 ]]; then remotegroup=56 ; fi
			[[ $group = $remotegroup ]] && \
				echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set protocols ospf area $ospfarea network $tunnetwork" >>  $auxscript || \
				echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set protocols ospf area 0.0.0.0 network $tunnetwork" >>  $auxscript
		done
		echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper delete protocols ospf area 0.0.0.0" >> $edgescript
		echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set protocols ospf area $ospfarea" >> $edgescript
		cat $auxscript | grep $ospfarea >> $edgescript
		echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set protocols ospf area 0.0.0.0" >> $edgescript
		cat $auxscript | grep "0.0.0.0" >> $edgescript
		echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper commit" >> $edgescript
		echo "/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper save" >> $edgescript
		cat $edgescript
	;;
	"-CHR")

	;;
	*)
	;;
esac
