#!/bin/ksh

#	$Telecomlobby: setup_node,v 0.1 11/3/2021 21:01:04 taglio$
#
#unbound: https://blog.c6h12o6.org/post/unbound-dnssec-dns-over-tls/
#sshd: https:/github.com/vedetta-com/vedetta/blob/master/$basedir/src/usr/local/share/doc/vedetta/OpenSSH_Principals.md	
#smptd: https://github.com/vedetta-com/caesonia
#smtpd: https://www.vultr.com/docs/an-openbsd-e-mail-server-using-opensmtpd-dovecot-rspamd-and-rainloop
#smtpd: https://prefetch.eu/blog/2020/email-server/
#smtpd: https://poolp.org/posts/2019-09-14/setting-up-a-mail-server-with-opensmtpd-dovecot-and-rspamd/
#smtpd: https://unixsheikh.com/tutorials/arch-linux-mail-server-tutorial-part-2-opensmtpd-dovecot-dkimproxy-and-lets-encrypt.html
#smtpd: https://wiki.archlinux.org/title/OpenSMTPD
#smtpd: https://git.sr.ht/~guidocella/personal-email-server-guide
#nsd and powerdns: https://github.com/vedetta-com/dithematic

#####
#
#TODO ssh reverse tool in installation to launch different process executed by hand
# configure to create /tmp/config.ini
# 
#
#####

set -o errexit
set -o nounset

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/root/Bin:/home/taglio/Sources/Git/OpenBSD
BACKUPS="/root/Backups"

#GLOBAL VAR

uid=$(id -u)
app=$(basename $0)
egressinterface=$(ifconfig egress | cut -d  : -f1 | head -n1)
publicip=$(ifconfig $egressinterface | grep inet |grep -v inet6 | cut -d ' ' -f2)
publicnetmask=$(ifconfig $egressinterface | grep inet | grep -v inet6 | awk '{print $4}')
publicbcast=$(ifconfig $egressinterface | grep inet | grep -v inet6 | awk '{print $6}')
publichost=$(dig -x $publicip +short @8.8.8.8 | sed 's/.$//')
domainname=$(print $publichost | sed 's/^[^.]*.//')
defaultv4router=$(route -n show | awk '/default/{print $2}' | head -n 1)
macdefaultv4router=$(arp -an | grep -w $defaultv4router |  awk '{print $2}')
dyndns=$(host -t a cat-01.hopto.org | cut -d ' ' -f4)
basedir="/home/taglio/Sources/Git/OpenBSD"
tmpdir=$(mktemp -d)
datarelease=$(date +"%d%m%Y%H%m%S")
userna=$(id -nu $uid)
ipv6ctrl=
ipv6egress=
ipv6prefix=
ipv6defrouter=
sha256ctrl=0

umask 002

if [[ $uid -ne 0 ]]; then
	print $0 "you've got to run $0 as UID=0 \n"
	exit 1
fi
if [[ $# -eq 0 ]]; then
	print $0 "have to be used with the following options \
			\n \
			\n-I  -> install \
			\n-U  -> upgrade \
			\n-D  -> daemons \
			\n-A  -> administrate \
			\n"
	
	exit 1
fi
function error_exit {
    echo "${app}: ${1:-"Unknown Error"}" 1>&2
    exit 1
}


function pidof {
	ps axc -o pid,command | awk "\$2~/^`echo $1`\$/ {print \$1}"
}

function pkg {
	typeset var phase=$1

	case $phase in
		"shell")
			pkg_add colorls nano wget fping iperf uptimed oidentd sqlite3 \
				nmap tor ipcalc gnupg-- rspamd--
		;;
		"smtpd")
			pkg_add opensmtpd-filter-rspamd \
				dovecot dovecot-pigeonhole
		;;
		"powernsd")
			pkg_add powerdns ldns-utils drill
		;;
	esac
}

function cleanold {
	typeset var directory=$1
	for file in $directory*.old; do
		if [[ -e "$file" ]]; then
			mv $file $BACKUPS
		fi
	done
	for file in $directory.*.old; do
		if [[ -e "$file" ]]; then
			mv $file $BACKUPS
		fi	
	done
}

function custom {
	for file in $(find $1 -type f -maxdepth $2); do
		(: "${hostname?}") 2>/dev/null && sed -i "s/\/HOSTNAME\//$hostname/g" $file
		(: "${landomainname?}") 2>/dev/null && sed -i "s/\/LANDOMAINNAME\//$landomainname/g" $file
		(: "${routerid?}") 2>/dev/null && sed -i "s/\/ROUTERID\//$routerid/g" $file
		(: "${publichost?}") 2>/dev/null && sed -i "s/\/PUBLICHOST\//$publichost/g" $file
		(: "${domainname?}") 2>/dev/null && sed -i "s/\/DOMAINNAME\//$domainname/g" $file
		(: "${srcid?}") 2>/dev/null && sed -i "s/\/SRCID\//$srcid/g" $file
		(: "${publichostname?}") 2>/dev/null && sed -i "s/\/PUBLICHOSTNAME\//$publichostname/g" $file
		(: "${publicip?}") 2>/dev/null && sed -i "s/\/PUBLICIP\//$publicip/g" $file
		(: "${dyndns?}") 2>/dev/null && sed -i "s/\/DYNDNS\//$dyndns/g" $file
		(: "${publicnetmask?}") 2>/dev/null && sed -i "s/\/PUBLICNETMASK\//$publicnetmask/g" $file
		(: "${publicbcast?}") 2>/dev/null && sed -i "s/\/PUBLICBCAST\//$publicbcast/g" $file
		(: "${ipv6egress?}") 2>/dev/null && sed -i "s/\/PUBV6\//${ipv6egress}/g" $file
		(: "${ipv6prefix?}") 2>/dev/null && sed -i "s/\/PREFIX\//${ipv6prefix}/g" $file
		(: "${defaultv4router?}") 2>/dev/null && sed -i "s/\/ROUTEV4\//${defaultv4router}/g" $file
		(: "${ipv6defrouter?}") 2>/dev/null && sed -i "s/\/ROUTEV6\//${ipv6defrouter}/g" $file
		
	done
}

function sha256compare {
	if [[ -e $1 ]]; then
		oldsha256=$(sha256 $1 | awk '{print $4}')
	else
		oldsha256=""
	fi
	newsha256=$(sha256 $2 | awk '{print $4}')
	if [ "$oldsha256" != "$newsha256" ]; then
		sha256ctrl=1
	else
		sha256ctrl=0
	fi
}


function backup {
	CURRENTBACKUP="$BACKUPS/$datarelease"
	mkdir -p "$CURRENTBACKUP/$1/"
	case $1 in
		"static")
			
			cp -p /etc/{hostname.$egressinterface,mygate} "$CURRENTBACKUP/$1/"
		;;
		"basic")
			mkdir -p "$CURRENTBACKUP/$1/{$uidna,root,etc}"
			for file in $(find "/home/$uidna" -type f -maxdepth 1 -name ".*"); do
				cp -p $file "$CURRENTBACKUP/$1/$uidna"
			done
			for file in $(find "/root" -type f -maxdepth 1 -name ".*"); do
				cp -p $file "$CURRENTBACKUP/$1/root"
			done
			
			cp -p /etc/{dhclient.conf,resolv.conf.tail,doas.conf,myname,sysctl.conf,hostname.vether0,daily.local,rc.local} "$CURRENTBACKUP/$1/etc"
		;;
		"users")
			for file in $(find "/home/$uidna/Bin" -type f -maxdepth 1 ); do
				cp -p $file "$CURRENTBACKUP/$1"
			done
		;;
		"scripts")
			for file in $(find "/root/Bin" -type f -maxdepth 1 ); do
				cp -p $file "$CURRENTBACKUP/$1"
			done
		;;
		"unbound")
			mkdir -p "$CURRENTBACKUP/$1/{etc,db}"
			for file in $(find "/var/unbound/etc" -type f -maxdepth 1); do
				cp -p $file "$CURRENTBACKUP/$1/etc"
			done
			for file in $(find "/var/unbound/db" -type f -maxdepth 1); do
				cp -p $file "$CURRENTBACKUP/$1/db"
			done
		;;
		"ssh")
			for file in $(find "/etc/ssh" -type f -maxdepth 2); do
				cp -p $file "$CURRENTBACKUP/$1/"
			done
		;;
		"ipsec")
			cp -Rp /etc/iked/  "$CURRENTBACKUP/$1/"
			cp -p /etc/{iked.conf,iked.conf.*} "$CURRENTBACKUP/$1/"
		;;
		"gre")
			configuration "gre"
		;;
		"pf")
			for file in $(find "/etc" -type f -maxdepth 1 -name "pf.*"); do
				cp -p $file "$CURRENTBACKUP/$1/"
			done
		
		;;
		"ospf")
			configuration "ospf"
		;;
		"ntpd")
			configuration "ntpd"
		;;
		"remote")
			if [[ -d /etc/ssh/remote_install ]]; then	
				for file in $(find "/etc/ssh/remote_install" -type f -maxdepth 1); do
					cp -p $file "$CURRENTBACKUP/$1/"
				done
			fi
		;;
		"httpdbasic")	
			for file in $(find /etc -name "httpd.*" -type f -maxdepth 1); do
				cp -p $file "$CURRENTBACKUP/$1/"
			done
		;;
		"relayd")
			configuration "relayd"
		;;
		"all")
			sh setup_node -I	
		;;
	esac
}


function upgrade {
	case $1 in
		"unbound")
			pkill dhclient
			install -o root -g wheel -m 0644 $basedir/src/etc/resolv.conf /etc/
			install -o _unbound -g _unbound -m 0750  $basedir/src/var/unbound/etc/unbound.conf /var/unbound/etc/unbound.conf
			install -o _unbound -g _unbound -m 0750  $basedir/src/var/unbound/etc/stub-zone.conf /var/unbound/etc/stub-zone.conf
			rcctl restart unbound ||  error_exit "$LINENO: ERROR: UNBOUND failed."
		;;
		"ssh")
			if [[ ! -d "$basedir/../OpenBSD-private-CA" ]]; then
				echo "OpenBSD-private-CA not found cloning it..."
				cd  ..
				git clone https://github.com/redeltaglio/OpenBSD-private-CA.git
				chown -R taglio:wheel OpenBSD-private-CA/
				cd OpenBSD-private-CA
				sh setup_host
			else
				cd "$basedir/../OpenBSD-private-CA"
				git pull
				cd ..
				chown -R taglio:wheel OpenBSD-private-CA/
				cd OpenBSD-private-CA
				sh setup_host
			fi	
			rm /etc/ssh/principals/taglio
			echo "wheel" > /etc/ssh/principals/taglio
		;;
		"ipsec")
			sha256compare "/etc/iked/ca/ca.crt" "$basedir/src/etc/iked/ca/ca.crt"
			if [[ $sha256ctrl -eq 1 ]]; then
				echo "ca.crt upgrade"
				install -o root -g wheel -m 0644  $basedir/src/etc/ca/ca.crt /etc/iked/ca/
			fi
			tmpdir=$(mktemp -d)
			openssl pkcs12 -nodes -in "/tmp/$publichost.p12" -nocerts -passin pass:123456789 -passout pass:123456789 -out "$tmpdir/local.key"
			openssl pkcs12 -nodes -in "/tmp/$publichost.p12" -clcerts -nokeys -passin pass:123456789 -passout pass:123456789 -out "$tmpdir/$publichost.crt"
			openssl x509 -pubkey -noout -passin pass:123456789 -in "/etc/iked/certs/$publichost.crt"  > "$tmpdir/local.pub"
			sha256compare "/etc/iked/private/local.key" "$tmpdir/local.key"
			if [[ $sha256ctrl -eq 1 ]]; then
				echo "local.key upgrade"
				openssl pkcs12 -nodes -in "/tmp/$publichost.p12" -nocerts -passin pass:123456789 -passout pass:123456789 -out /etc/iked/private/local.key
				openssl pkcs12 -nodes -in "/tmp/$publichost.p12" -clcerts -nokeys -passin pass:123456789 -passout pass:123456789 -out "/etc/iked/certs/$publichost.crt"
				openssl x509 -pubkey -noout -passin pass:123456789 -in "/etc/iked/certs/$publichost.crt"  > /etc/iked/local.pub
			fi
			rm -rf $tmpdir
			for file in $(find $basedir/src/etc/iked/pubkeys/ufqdn/ -name "*@*"); do
				filename=$(basename $file)
				sha256compare "$file" "/etc/iked/pubkeys/ufqdn/$filename"
				if [[ $sha256ctrl -eq 1 ]]; then
					echo "$filename upgrade"
					install -o root -g wheel -m 0644  $file /etc/iked/pubkeys/ufqdn/
				fi
			done
			rm -rf $tmpdir
			tmpdir=$(mktemp -d)
			cp  $basedir/src/etc/iked.conf $tmpdir
			if [[ $(grep -c hostname /tmp/config.ini) -eq 1 ]]; then
				srcid=$(cat /tmp/config.ini  | grep hostname |cut -d \# -f2)
			else 
				srcid=$(hostname -s)
			fi
			if [[ "$srcid" == "varuna" ]]; then
				srcid="neo"
			fi
			for vpnc_ip in $(dig vpnc.$domainname A +short @8.8.8.8); do
				vpnc_host=$(dig -x $vpnc_ip +short @8.8.8.8 | sed 's/.$//')
				if [[ -e "/etc/iked.conf.$vpnc_host" ]]; then
					echo include \"/etc/iked.conf.$vpnc_host\" >> "$tmpdir/iked.conf"
					if grep -q "ecp384" "/etc/iked.conf.$vpnc_host"; then
						cp $basedir/src/etc/iked.conf.mikrotik "$tmpdir/iked.conf.$vpnc_host"
					elif grep -q "ecp256" "/etc/iked.conf.$vpnc_host"; then
						cp $basedir/src/etc/iked.conf.edgeos "$tmpdir/iked.conf.$vpnc_host"
					else
						cp $basedir/src/etc/iked.conf.openbsd "$tmpdir/iked.conf.$vpnc_host"
					fi
					sed -i "s/\/POP\//$vpnc_host/g" "$tmpdir/iked.conf.$vpnc_host"
					sed -i "s/\/POPIP\//$vpnc_ip/g" "$tmpdir/iked.conf.$vpnc_host"
					type=$(cat "/etc/iked.conf.$vpnc_host" | head -n 1 | awk '{print $3}')
					sed -i "s/\/TYPE\//$type/g" "$tmpdir/iked.conf.$vpnc_host"
					sed -i "s/\/PUBLICIP\//$publicip/g" "$tmpdir/iked.conf.$vpnc_host"
					sed -i "s/\/PUBLICHOST\//$publichost/g" "$tmpdir/iked.conf.$vpnc_host"
					sed -i "s/\/SRCID\//$srcid/g" "$tmpdir/iked.conf.$vpnc_host"
					sed -i "s/\/DOMAINNAME\//$domainname/g" "$tmpdir/iked.conf.$vpnc_host"
					encx=$(cat "/etc/iked.conf.$vpnc_host" | awk -F'enc' '{print substr($2,0,1)}' | tail -n 1)
					sed -i "s/\/X\//$encx/g" "$tmpdir/iked.conf.$vpnc_host"
					sha256compare "/etc/iked.conf.$vpnc_host" "$tmpdir/iked.conf.$vpnc_host"
					if [[ $sha256ctrl -eq 1 ]]; then
						echo "$vpnc_host upgrade"
						install -o root -g wheel -m 0640   "$tmpdir/iked.conf.$vpnc_host" /etc/
					fi
				fi
			done
			for vpnc_host in $(dig vpnc.telecomlobby.com TXT +short @8.8.8.8 | sed 's/\"//g'); do
				if [[ -e "/etc/iked.conf.$vpnc_host" ]]; then
					echo include \"/etc/iked.conf.${vpnc_host}\" >> "$tmpdir/iked.conf"
				fi
				vpnc_ip=$(dig $vpnc_host A +short @8.8.8.8 | tail -n 1)
				cp $basedir/src/etc/iked.conf.edgeos "$tmpdir/iked.conf.$vpnc_host"
				sed -i "s/\/POP\//$vpnc_host/g" "$tmpdir/iked.conf.$vpnc_host"
				sed -i "s/\/POPIP\//$vpnc_ip/g" "$tmpdir/iked.conf.$vpnc_host"
				type=$(cat "/etc/iked.conf.$vpnc_host" | head -n 1 | awk '{print $3}')
				sed -i "s/\/TYPE\//$type/g" "$tmpdir/iked.conf.$vpnc_host"
				sed -i "s/\/PUBLICIP\//$publicip/g" "$tmpdir/iked.conf.$vpnc_host"
				sed -i "s/\/PUBLICHOST\//$publichost/g" "$tmpdir/iked.conf.$vpnc_host"
				sed -i "s/\/SRCID\//$srcid/g" "$tmpdir/iked.conf.$vpnc_host"
				sed -i "s/\/DOMAINNAME\//$domainname/g" "$tmpdir/iked.conf.$vpnc_host"
				encx=$(cat "/etc/iked.conf.$vpnc_host" | awk -F'enc' '{print substr($2,0,1)}' | tail -n 1)
				sed -i "s/\/X\//$encx/g" "$tmpdir/iked.conf.$vpnc_host"
				sha256compare "/etc/iked.conf.$vpnc_host" "$tmpdir/iked.conf.$vpnc_host"
				if [[ $sha256ctrl -eq 1 ]]; then
					echo "$vpnc_host upgrade"
					install -o root -g wheel -m 0640   "$tmpdir/iked.conf.$vpnc_host" /etc/
				fi
				sha256compare "/etc/iked.conf.$vpnc_host" "$tmpdir/iked.conf.$vpnc_host"
				if [[ $sha256ctrl -eq 1 ]]; then
					echo "$vpnc_host upgrade"
					install -o root -g wheel -m 0640   "$tmpdir/iked.conf.$vpnc_host" /etc/
				fi
			done
			sha256compare "/etc/iked.conf" 	"$tmpdir/iked.conf"
			if [[ $sha256ctrl -eq 1 ]]; then
				echo "iked.conf upgrade"
				install -o root -g wheel -m 0600  "$tmpdir/iked.conf" /etc/iked.conf
			fi
			iked -n
			if [[ $sha256ctrl -eq 1 ]]; then
				rcctl restart iked ||  error_exit "$LINENO: ERROR: IKED failed."
			fi
			
		;;
		"gre")
			configuration "gre"
		;;
		"pf")
			tmpdir=$(mktemp -d)
			for file in $(find $basedir/src/etc/ -name "pf.*" -type f -maxdepth 1); do 
				cp $file $tmpdir
			done
			for vpnc_ip in $(dig vpnc.$domainname A +short @8.8.8.8); do
				echo "$vpnc_ip/32" >> "$tmpdir/pf.conf.table.ipsec"
			done
			for vpnc_ip in $(dig vpncN.$domainname A +short @8.8.8.8); do
				echo "$vpnc_ip/32" >> "$tmpdir/pf.conf.table.ipsec"
			done
			for vpnc_host in $(dig vpnc.telecomlobby.com TXT +short @8.8.8.8 | sed 's/\"//g'); do
				vpnc_ip=$(dig $vpnc_host A +short @8.8.8.8 | tail -n 1)
				if [[ ! -z $vpnc_ip ]]; then
					echo "$vpnc_ip/32" >> "$tmpdir/pf.conf.table.ipsec"
				fi
			done
			sha256compare "/etc/pf.conf.table.ipsec" "$tmpdir/pf.conf.table.ipsec"
			if [[ $sha256ctrl -eq 1 ]]; then
				echo "pf.conf.table.ipsec upgrade"
				install -o root -g wheel -m 0640  "$tmpdir/pf.conf.table.ipsec" /etc/
				pfctl -nf /etc/pf.conf
				pfctl -f /etc/pf.conf
			fi
			sha256compare "/etc/pf.conf.table.nsd" "$tmpdir/pf.conf.table.nsd"
			if [[ $sha256ctrl -eq 1 ]]; then
				echo "pf.conf.table.nsd upgrade"
				install -o root -g wheel -m 0640  "$tmpdir/pf.conf.table.nsd" /etc/
				pfctl -nf /etc/pf.conf
				pfctl -f /etc/pf.conf
			fi
			for file in $(find /etc -maxdepth 1 -name "iked.conf.*") ; do
				tagged=$(echo $file | sed "s/\/etc\/iked.conf.//")
				count=$(dig $tagged A +short @8.8.8.8 | wc -l)
				if [[ $count -gt 1 ]]; then
					iptagged=$(dig $tagged A +short @8.8.8.8 | tail -n 1)
				else
					iptagged=$(dig $tagged A +short @8.8.8.8)
				fi
				sed -i "s/\/TAGGED\//${tagged}/g" $tmpdir/pf.conf.macro.enc.{in,out}	
				sed -i "s/\/IPTAGGED\//${iptagged}/g" $tmpdir/pf.conf.macro.enc.{in,out}
				cat $basedir/src/openbsd/pf.conf.openbsd | head -n 1 >> $tmpdir/pf.conf.macro.enc.in
				cat $basedir/src/openbsd/pf.conf.openbsd | tail -n 1 >> $tmpdir/pf.conf.macro.enc.out
			done
			sed -i '$d' $tmpdir/pf.conf.macro.enc.{in,out}
			sha256compare "/etc/pf.conf.macro.enc.in" "$tmpdir/pf.conf.macro.enc.in"
			if [[ $sha256ctrl -eq 1 ]]; then
				echo "pf.conf.macro.enc.in upgrade"
				install -o root -g wheel -m 0640  "$tmpdir/pf.conf.macro.enc.in" /etc/
			fi
			sha256compare "/etc/pf.conf.macro.enc.out" "$tmpdir/pf.conf.macro.enc.out"
			if [[ $sha256ctrl -eq 1 ]]; then
				echo "pf.conf.macro.enc.out upgrade"
				install -o root -g wheel -m 0640  "$tmpdir/pf.conf.macro.enc.out" /etc/
			fi
			landomainname=$(cat /etc/myname | sed 's/^[^.]*.//')
			custom "$tmpdir" "1"
			sha256compare "/etc/pf.conf" "$tmpdir/pf.conf"
			if [[ $sha256ctrl -eq 1 ]]; then
				echo "pf.conf upgrade"
				install -o root -g wheel -m 0640  "$tmpdir/pf.conf" /etc/
			fi
			if [[ $sha256ctrl -eq 1 ]]; then
				pfctrl=$(pfctl -nf /etc/pf.conf)
				if [[ -z $pfctrl ]]; then
					echo "PF ruleset OK"
				fi
				ctrl=
				while [ -z $ctrl ]
				do
					echo 'The load PF rules and enable it type 1 '
					read ctrl
					if [[ "$ctrl" -eq 1 ]]; then
						if [[ $(pfctl -si | head -n 1 | grep -c "Disabled") -eq 1 ]]; then
							pfctl -f /etc/pf.conf
							ctrl=
							while [ -z $ctrl ]
							do
								echo 'Your connection will be close type 1 to continue '
								read ctrl
								pfctl -e && exit 1
							done
						elif [[ $(pfctl -si | head -n 1 | grep -c "Disabled") -eq 0 ]]; then
							pfctl -f /etc/pf.conf
						fi
					fi
				done
			fi
		;;
		"ospf")
			configuration "ospf"
		;;
		"ntpd")
			configuration "ntpd"
		;;
		"remote")
			tmpdir=$(mktemp -d)
			if [[ -d "/etc/ssh/remote_install" ]]; then
				cp $basedir/src/etc/ssh/remote_install/* $tmpdir
				custom "$tmpdir" "1"
				sha256compare "/etc/ssh/remote_install/remote_install.conf" "$tmpdir/remote_install.conf"
				if [[ $sha256ctrl -eq 1 ]]; then
					echo "remote_install.conf upgrade"
					install -o root -g wheel -m 0640  "$tmpdir/remote_install.conf" /etc/ssh/remote_install
				fi
				sha256compare "/etc/ssh/remote_install/authorized_keys" "$tmpdir/authorized_keys"
				if [[ $sha256ctrl -eq 1 ]]; then
					echo "authorized_keys upgrade"
					install -o root -g wheel -m 0640  "$tmpdir/authorized_keys" /etc/ssh/remote_install
				fi
			else 
				mkdir /etc/ssh/remote_install
				for file in $(find $basedir/src/etc/ssh/remote_install/ -type f); do
					filename=$(basename $file)
					if [[ "$filename" != "rc.local" ]]; then
						install -o root -g wheel -m 0640 $file /etc/ssh/remote_install/
					fi
				done
				custom "/etc/ssh/remote_install" "1"
					
			fi
			sha256compare "$basedir/src/usr/local/sbin/remote-install" "/usr/local/sbin/remote-install"
			if [[ $sha256ctrl -eq 1 ]]; then
				echo "remote-install upgrade"
				install -o root -g wheel -m 0750 $basedir/src/usr/local/sbin/remote-install /usr/local/sbin/
			fi
			if [[ $(grep -c remote_install.conf /etc/rc.local) -eq 0 ]]; then
				cat $basedir/src/etc/ssh/remote_install/rc.local >> /etc/rc.local
			fi
			pidof_remote=$(pidof "remote")
			if [[ -z $pidof_remote ]]; then
				/usr/sbin/sshd -f /etc/ssh/remote_install/remote_install.conf
			else
				kill -9 $(cat /var/run/sshd-remote-install.pid)
				/usr/sbin/sshd -f /etc/ssh/remote_install/remote_install.conf
			fi
			install -o root -g wheel -m 0640 $basedir/src/etc/httpd.conf.acmefirst /etc/httpd.conf
			custom "/etc/" "1"
			httpd -n
			pidof_httpd=$(pidof "httpd")
			if [[ -z $pidof_remote ]]; then
				rcctl enable httpd
				rcctl start httpd ||  error_exit "$LINENO: ERROR: HTTPD failed."
			else
				rcctl restart httpd
			fi
			
		;;
		"remoteinstall")
			echo "connecting to remote OpenBSD MESH hosts..."
			cat /dev/null > /etc/ssh/ssh_known_hosts
			for file in $(find /etc -maxdepth 1 -name "iked.conf.*" -type f); do
				if [[ $(grep -c "brainpool512" $file) -eq 1 ]]; then
					remotehost=$(echo $file | sed "s/\/etc\/iked.conf.//")
					ssh-keyscan -t ed25519 -p 31137 $remotehost > /etc/ssh/ssh_known_hosts
					ssh -p 31137 $remotehost -v
				fi
			done
			sleep 31
			ctrl=
			while [ -z $ctrl ]
			do
				echo 'Have you add the root ssh key to admin user onto mikrotik ?'
				cat /root/.ssh/id_rsa.pub
				echo 'Type 1 to continue '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					echo "ok"
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			    
			done
		;;
		"relayd")
			configuration "relayd"
		;;
		"newhost")
			
			sh "$basedir/$app" -U pf
			install -o root -g wheel -m 0640 $basedir/src/etc/ssh/remote_install/authorized_keys /etc/ssh/remote_install/
			pubkey=$(ls -lt "$basedir/src/etc/iked/pubkeys/ufqdn/" | awk '{print $9}' | awk 'FNR == 2 {print}')
			install -o root -g wheel -m 0640 "$basedir/src/etc/iked/pubkeys/ufqdn/$pubkey" /etc/iked/pubkeys/ufqdn/
			
		;;
		"scripts")
			configuration "scripts"
		;;
		"file")
			if [[ ! -e "$BACKUPS/file" ]]; then
				mkdir "$BACKUPS/file"
			fi
			fileupdate=
			while [ -z $fileupdate ]
			do
				echo "Which file do you want to update [type dst complete PATH]? "
				read fileupdate
				cp -p $fileupdate "$BACKUPS/file/$(basename $fileupdate)"
				gitfile="$basedir/src$fileupdate"
				install -o root -g wheel -m 0644 $gitfile $fileupdate	
			done
		;;
		"dyndnspop")
			for vpnc_host in $(dig vpnc.telecomlobby.com TXT +short @8.8.8.8 | sed 's/\"//g'); do
				vpnc_ip=$(dig $vpnc_host A +short @8.8.8.8 | tail -n 1)
				if [[ ! -z $vpnc_ip ]]; then
					for iked_conf in $(ls /etc/iked.conf.*); do
						if [[ $(grep -c "ecp256" $iked_conf) -eq 2 ]]; then
							pophost=$(cat $iked_conf | head -n 1 | awk '{print $2}' | sed 's/"//g')
							greinterface=$(cat $iked_conf | tail -n 1 | awk '{print $4}' | sed 's/enc/gre/') 
							sh /root/Bin/change_endpoint.sh $greinterface $pophost 
							
						fi
					done
				fi
			done
		;;
	esac
}

function admin {
	case $1 in
		"cleanlast")
			sh  $basedir/clean_last
		;;
		"sslcareq")
			cd /etc/ssl
			ftp -o /tmp/root-ca.crt http://ocsp.$(hostname | sed "s/$(hostname -s).//")/root-ca.crt
			openssl x509 -in /tmp/root-ca.crt -out /tmp/root-ca.pem
			if [[ $(grep -c "ocsp.$(hostname | sed "s/$(hostname -s).//")" /etc/ssl/cert.pem) -eq 0 ]]; then 
				echo "\n#ocsp.$(hostname | sed "s/$(hostname -s).//")\n" >> /etc/ssl/cert.pem
				cat /tmp/root-ca.crt >> /etc/ssl/cert.pem
			fi
			rm -rf /tmp/root-ca.{crt,pem} 
			if [[ ! -d csr ]]; then
				mkdir csr
			fi
			if [[ ! -d certs ]]; then
				mkdir certs
			fi
			openssl genrsa -out "private/$(hostname).key" 2048
			openssl rsa -in "/etc/ssl/private/$(hostname).key" -out "/etc/ssl/private/$(hostname)-nopwd.key"
			openssl req -new -key "/etc/ssl/private/$(hostname)-nopwd.key" -out "/etc/ssl/csr/$(hostname).csr"
			if [[ ! -d "/var/www/htdocs/$(hostname)" ]]; then
				mkdir "/var/www/htdocs/$(hostname)"
			fi
			cp "/etc/ssl/csr/$(hostname).csr" "/var/www/htdocs/$(hostname)"
			echo "Download csr from http://$(hostname)/$(hostname).csr to the CA server"
			ctrl=
			echo "Have you created the certificate onto the CA?"
			while [ -z $ctrl ]
			do
				echo "Type 1 to go ahead "
				read ctrl
			done
			ftp -o certs/$(hostname).crt http://web.telecom.lobby/CA_transfer/$(hostname)/$(hostname).crt
			openssl x509 -in certs/$(hostname).crt -out certs/$(hostname).pem
			echo "CRT downloaded and PEM created"
		;;
	esac
}

function configuration {
	phase=$1
	if [[ $# -eq 2 ]]; then
		subphase=$2
	fi
	case $phase in
		"static")
			ifconfig $egressinterface -inet6
			install -o root -g wheel -m 0640  $basedir/src/etc/hostname.egress "/etc/hostname.$egressinterface"
			install -o root -g wheel -m 0640 $basedir/src/etc/mygate /etc/
			if [[ "$ipv6ctrl" -eq "static" ]]; then
				rcctl stop slaacd
				rcctl disable slaacd
				tmphostname=$(mktemp)
				cat "/etc/hostname.$egressinterface" | sed '/^inet6/d' > $tmphostname
				echo "inet6 -autoconf" >> $tmphostname
				echo "inet6 -soii" >> $tmphostname
				echo "inet6 -temporary" >> $tmphostname
				echo "inet6 $ipv6egress/$ipv6prefix" >> $tmphostname
				cat $tmphostname > "/etc/hostname.$egressinterface"
				echo $ipv6defrouter >> /etc/mygate
			fi
			echo "arp -s $defaultv4router $macdefaultv4router" > /etc/rc.local
			arp -s $defaultv4router $macdefaultv4router
			custom "/etc" "1"
			cd /tmp
			nohup sh /etc/netstart &
			cd $basedir
		;;
		"basic")
			hostname "$hostname.$landomainname"
			echo "dot files"
			for file in $basedir/src/home/taglio/.*; do
				if [[ -e "$file" ]]; then
					install -o taglio -g wheel -m 0640  $file /home/taglio/ 
				fi
			done
			cleanold "/home/taglio/"
			for file in $basedir/src/root/.*; do
				if [[ -e "$file" ]]; then
					install -o root -g wheel -m 0640  $file /root/
				fi
			done
			cleanold "/root/"
			echo "timezone from public ip \n"
			tmp=$(mktemp)
			curl "http://ipinfo.io/$publicip" > $tmp
			iptmz=$(cat $tmp | grep timezone | cut -d \" -f4)
			rm -rf {/etc/localtime,$tmp}
			ln -fs "/usr/share/zoneinfo/$iptmz" /etc/localtime
			echo "installing automatic update \n"
			if [[ ! -e "/etc/daily.local" ]]; then
				install -o root -g wheel -m 0640  $basedir/src/etc/daily.local /etc/
			elif ! grep -q "pkg_add" "/etc/daily.local"; then
				cat $basedir/src/etc/daily.local >> "/etc/daily.local"
			fi
			echo "doas.conf, myname and sysctl.conf \n"
			install -o root -g wheel -m 0644  $basedir/src/etc/{doas.conf,myname,sysctl.conf} /etc/
			cat $basedir/src/etc/rc.local >> /etc/rc.local
			file="/etc/sysctl.conf"
			while IFS= read -r line
			do
				if [[ ! -z $line ]]; then
					sysctl -w ${line}
				fi
			done <"$file"
			echo "vether"
			install -o root -g wheel -m 0644  $basedir/src/etc/hostname.vether0 /etc/
			echo "configuring iperf uptimed and oidentd \n"
			pidof_uptimed=$(pidof "uptimed")
			if [[ -z $pidof_uptimed ]]; then
				rcctl enable uptimed
				rcctl start uptimed || error_exit "$LINENO: ERROR: UPTIMED failed."
			else
				rcctl restart uptimed || error_exit "$LINENO: ERROR: UPTIMED failed."
			fi
			custom "/etc" "1"
			cd /tmp
			nohup sh /etc/netstart vether0 &
			cd $basedir
			sh /etc/rc.local
			if [[ ! -e /root/.ssh/id_ed25519 ]]; then
				cat /dev/zero | ssh-keygen -t ed25519 -N "" -C "root@$hostname.$landomainname" -f /root/.ssh/id_ed25519
				cat /dev/zero | ssh-keygen -N "" -C "root@$hostname.$landomainname" -f /root/.ssh/id_rsa
			fi
			rm -rf /etc/ssh/ssh_host_ed25519_*
			cat /dev/zero | ssh-keygen -q -N "" -t ed25519 -C "$hostname@$landomainname" -f /etc/ssh/ssh_host_ed25519_key
			echo "Add your new id_ed25519.pub to the repository src/etc/ssh/remote_install/authorized_keys and update others hosts"
			cat /root/.ssh/id_ed25519.pub
			echo "Add your new ssh_host_ed25519_key.pub to the CA repository src/etc/ssh/ca/host/$hostname.$landomainname/ and create the new SSHCA certificate"
			cat /etc/ssh/ssh_host_ed25519_key.pub
			echo "Update the nsd internal $landomainname zone $hostname SSHFP record, you can do it automatically"
			
			ssh-keygen -r $hostname -f /etc/ssh/ssh_host_ed25519_key.pub
			if [[ $configini -eq 1 ]]; then
				ctrl=
				while [ -z $ctrl ]
				do
					echo 'Go ahead type 1 '
					read ctrl
				done
			fi
		;;	
		"users")
			echo "vmail, dsync, _iperfd, wwwuser"
			if ! getent passwd vmail 1>&-; then 
				useradd -m -u 2000 -g =uid -c "Virtual Mail" -d /var/vmail -s /sbin/nologin vmail
			fi
			if ! getent passwd dsync  1>&-; then 
				useradd -m -u 2001 -g =uid -c "Dsync Replication" -d /home/dsync -s /bin/ksh dsync
			fi
			if ! getent passwd _iperfd  1>&-; then 
				useradd -m -u 2002 -g =uid -c "Iperfd Daemon" -d /nonexistent -s /sbin/nologin _iperfd
			fi
			if ! getent passwd wwwftp  1>&-; then 
				useradd -u 2003 -g =uid -c "WWW Ftpd user" -d /var/www/htdocs -s /root/Bin/fake_shell.sh wwwftp
			fi
			for file in $basedir/src/home/taglio/Bin/*; do
				if [[ -e "$file" ]]; then
					install -o taglio -g wheel -m 0750  $file /home/taglio/Bin/
				fi
			done
			
		
		;;
		"scripts")
			for file in $basedir/src/root/Bin/*.sh; do
				if [[ -e "$file" ]]; then
					install -o root -g wheel -m 0700  $file /root/Bin/
				fi
			done
			cleanold "/root/Bin/"
		;;
		"unbound")
			pidof_unbound=$(pidof "unbound")
			if [[ -z $pidof_unbound ]]; then
				rcctl enable unbound
			fi
			case $subphase in 
				"local")
					install -o _unbound -g _unbound -m 0750  $basedir/src/var/unbound/db/root.key /var/unbound/db/
					wget --no-check-certificate https://192.0.47.9/domain/named.root -O /var/unbound/db/root.hints
					install -o _unbound -g _unbound -m 0750  $basedir/src/var/unbound/db/ca-certificates.crt /var/unbound/db/
					chown _unbound:_unbound /var/unbound/db/*
					install -o _unbound -g _unbound -m 0750  $basedir/src/var/unbound/etc/unbound-local.conf /var/unbound/etc/unbound.conf
					install -o _unbound -g _unbound -m 0750  $basedir/src/var/unbound/etc/remote-control.conf /var/unbound/etc/
					install -o _unbound -g _unbound -m 0750  $basedir/src/var/unbound/etc/forward-zone.conf /var/unbound/etc/
					custom "/var" "2"
					if [[ -z $pidof_unbound ]]; then
						rcctl start unbound ||  error_exit "$LINENO: ERROR: UNBOUND failed."
						
					else
						rcctl restart unbound ||  error_exit "$LINENO: ERROR: UNBOUND failed."
					fi
				;;
				"ipsec")
					install -o _unbound -g _unbound -m 0750  $basedir/src/var/unbound/etc/unbound.conf /var/unbound/etc/unbound.conf
					install -o _unbound -g _unbound -m 0750  $basedir/src/var/unbound/etc/stub-zone.conf /var/unbound/etc/stub-zone.conf
					rcctl restart unbound ||  error_exit "$LINENO: ERROR: UNBOUND failed."
				;;
			esac
		;;		
		"ssh") 
			publickey=$(ssh-keyscan -t ed25519 ::1 | sed "s/::1/[$publicip,$routerid]/")
			sshfp=$(ssh-keyscan -D -t ed25519 ::1 | sed "s/::1/$hostname/")
			if [[ ! -d /etc/ssh/ca ]]; then
				mkdir -p /etc/ssh/ca/principals
			fi
			case $subphase in
				"public")
					install -o root -g wheel -m 0640 $basedir/src/etc/ssh/sshd_public /etc/ssh/sshd_config
					install -o root -g wheel -m 0640 $basedir/src/etc/ssh/ssh_config /etc/ssh/
					#install -o root -g wheel -m 0640 $basedir/src/etc/ssh/ssh_known_hosts /etc/ssh
					install -o root -g wheel -m 0640 $basedir/src/etc/ssh/authorized_keys /etc/ssh/
					workstahost=$(cat /etc/ssh/authorized_keys | cut -d @ -f2)
					if [[ ! -d "/tmp/$workstahost.$landomainname" ]]; then
						mkdir "/tmp/$workstahost.$landomainname"
					else
						rm -rf "/tmp/$workstahost.$landomainname"
						mkdir "/tmp/$workstahost.$landomainname"
					fi
					custom "/etc/ssh" "2"
					custom "/etc" "1"
					rcctl restart sshd || error_exit "$LINENO: ERROR: SSHD failed."
					;;
				"ipsec")
					;;
			esac
			if [[ ! -d "/tmp/ca.$landomainname" ]]; then
				mkdir "/tmp/ca.$landomainname"
			else
				rm -rf "/tmp/ca.$landomainname"
				mkdir "/tmp/ca.$landomainname"
			fi
			echo $sshfp > "/tmp/ca.$landomainname/$landomainname.zone"
		;;
		"ipsec")
			if [[ -e "/etc/iked.conf" ]]; then
				rm -rf /etc/{iked,iked.conf,iked.conf.*}
			else
				rm -rf /etc/iked
			fi
			mkdir -p /etc/iked/{ca,certs,crls,export,private,pubkeys}
			mkdir -p /etc/iked/pubkeys/{ipv4,ipv6,fqdn,ufqdn}
			cd $basedir
			install -o root -g wheel -m 0644  $basedir/src/etc/iked/ca/ca.crt /etc/iked/ca/	
			openssl pkcs12 -nodes -in "/tmp/$publichost.p12" -nocerts -passin pass:123456789 -passout pass:123456789 -out /etc/iked/private/local.key
			openssl pkcs12 -nodes -in "/tmp/$publichost.p12" -clcerts -nokeys -passin pass:123456789 -passout pass:123456789 -out "/etc/iked/certs/$publichost.crt"
			openssl x509 -pubkey -noout -passin pass:123456789 -in "/etc/iked/certs/$publichost.crt"  > /etc/iked/local.pub
			
			for file in $(find $basedir/src/etc/iked/pubkeys/ufqdn/ -name "*@*"); do
				install -o root -g wheel -m 0644 $file /etc/iked/pubkeys/ufqdn/
			done
			rcctl enable iked
			rcctl set iked flags "-vv"
			typeset -i i
			i=0
			install -o root -g wheel -m 0640  $basedir/src/etc/iked.conf /etc/
			custom "/etc" "1"
			for vpnc_ip in $(dig vpnc.$domainname A +short @8.8.8.8)
			do
				vpnc_host=$(dig -x $vpnc_ip +short @8.8.8.8 | sed 's/.$//')
				vpnc_ips[i]="$vpnc_ip"
				vpnc_hosts[i]="$vpnc_host"
				if [ ! -d "/tmp/$vpnc_host" ]; then
					mkdir "/tmp/$vpnc_host"
				else
					rm -rf "/tmp/$vpnc_host"
					mkdir "/tmp/$vpnc_host"
				fi
				
				echo include \"/etc/iked.conf.$vpnc_host\" >> /etc/iked.conf
				if [[ $(nc -w1  $vpnc_ip 22 | grep -c "ROSSSH") -eq 1 ]]; then
					install -o root -g wheel -m 0640 $basedir/src/etc/iked.conf.mikrotik "/etc/iked.conf.$vpnc_host"
					if [[ -e "/tmp/$vpnc_host/$vpnc_host.rsc" ]]; then
						rm -rf "/tmp/$vpnc_host/$vpnc_host.rsc"
					fi
					cp $basedir/src/mikrotik/ipsec.rsc "/tmp/$vpnc_host/$vpnc_host.rsc"
					sed -i "s/\/POPIP\//$vpnc_ip/g" "/tmp/$vpnc_host/$vpnc_host.rsc"
					sed -i "s/\/POP\//$vpnc_host/g" "/tmp/$vpnc_host/$vpnc_host.rsc"
				elif [[ $(nc -w1  $vpnc_ip 22 | grep -c "ROSSSH") -eq 0 ]]; then
					install -o root -g wheel -m 0640 $basedir/src/etc/iked.conf.openbsd "/etc/iked.conf.$vpnc_host"
					cp $basedir/src/openbsd/iked.conf.openbsd "/tmp/$vpnc_host/iked.conf.$publichost"
					x=$((RANDOM%2+1))
					case $x in
						1)
							sed -i "s/\/TYPE\//active/g" "/etc/iked.conf.$vpnc_host"
							sed -i "s/\/TYPE\//passive/g" "/tmp/$vpnc_host/iked.conf.$publichost"
							
						;;
						2)
							sed -i "s/\/TYPE\//passive/g" "/etc/iked.conf.$vpnc_host"
							sed -i "s/\/TYPE\//active/g" "/tmp/$vpnc_host/iked.conf.$publichost"
						;;
					esac 
					sed -i "s/\/POPIP\//$vpnc_ip/g" "/tmp/$vpnc_host/iked.conf.$publichost"
					sed -i "s/\/POP\//$vpnc_host/g" "/tmp/$vpnc_host/iked.conf.$publichost"
					srcid=$(hostname -s)
					if [[ "$srcid" == "varuna" ]]; then
						srcid="neo"
					fi
					sed -i "s/\/POPID\//$srcid/g" "/tmp/$vpnc_host/iked.conf.$publichost"
				fi
				sed -i "s/\/POPIP\//$vpnc_ip/g" "/etc/iked.conf.$vpnc_host"
				sed -i "s/\/POP\//$vpnc_host/g" "/etc/iked.conf.$vpnc_host"
				sed -i "s/\/X\//$i/g" "/etc/iked.conf.$vpnc_host"
				install -o root -g wheel -m 0640 $basedir/src/etc/hostname.enc-X- "/etc/hostname.enc$i"
				sed -i "s/\/POP\//$vpnc_host/g" "/etc/hostname.enc$i"
				sh /etc/netstart "enc$i"
				i=$i+1
			done
			dyndnshost=$(dig vpnc.$domainname TXT +short @8.8.8.8 | sed 's/\"//g')
			if [[ ! -d "/tmp/$dyndnshost" ]]; then
				mkdir "/tmp/$dyndnshost"
			else
				rm -rf "/tmp/$dyndnshost"
				mkdir "/tmp/$dyndnshost"
			fi
			echo include \"/etc/iked.conf.$dyndnshost\" >> /etc/iked.conf
			install -o root -g wheel -m 0640 $basedir/src/etc/iked.conf.edgeos "/etc/iked.conf.$dyndnshost"
			sed -i "s/\/POPIP\//$(dig $dyndnshost A +short | tail -n 1)/g" "/etc/iked.conf.$dyndnshost"
			sed -i "s/\/POP\//$dyndnshost/g" "/etc/iked.conf.$dyndnshost"
			sed -i "s/\/X\//$i/g" "/etc/iked.conf.$dyndnshost"
			install -o root -g wheel -m 0640 $basedir/src/etc/hostname.enc-X- "/etc/hostname.enc$i"
			sed -i "s/\/POP\//$dyndnshost/g" "/etc/hostname.enc$i"
			sh /etc/netstart "enc$i"
			cp $basedir/src/edgeos/ipsec.conf "/tmp/$dyndnshost/"
			cp "/etc/iked/certs/$publichost.crt" "/tmp/$dyndnshost/"
			find /etc/ -type f -name "iked.*" | xargs -I {} 
			custom "/tmp" "2"
			custom "/etc" "1"
			rcctl start iked ||  error_exit "$LINENO: ERROR: IKED failed."
		;;
		"gre")	
			if [[ -e "/etc/hostname.gre0" ]]; then
				rm -rf /etc/hostname.gre?
			fi
			typeset -i i
			typeset -i lasttun
			lasttun=$(dig gre18994.$domainname TXT +short @8.8.8.8 | sed 's/\"//g')
			lasttun=$lasttun+1
			i=0
			for file in $(find /etc -maxdepth 1 -name "iked.conf.*") ; do
				index=$(cat $file | tail -n 1 | awk '{print $4}' | sed 's/enc//')
				install -o root -g wheel -m 0640 $basedir/src/etc/hostname.gre-X- "/etc/hostname.gre$index"
				pophost=$(echo $file | sed "s/\/etc\/iked.conf.//")
				sed -i "s/\/POPHOST\//$pophost/g" "/etc/hostname.gre$index"
				if [ "$pophost" == "uk.telecomlobby.com" ]; then
					sed -i "s/\/GROUP\//nsd/g" "/etc/hostname.gre$index"
				else
					sed -i "s/\/GROUP\//gre/g" "/etc/hostname.gre$index"
				fi
				sed -i "s/\/PUBLICIP\//$publicip/g" "/etc/hostname.gre$index"
				sed -i "s/\/X\//$index/g" "/etc/hostname.gre$index"
				count=$(dig $pophost A +short @8.8.8.8 | wc -l)
				if [[ $count -gt 1 ]]; then
					popip=$(dig $pophost A +short @8.8.8.8 | tail -n 1)
				else
					popip=$(dig $pophost A +short @8.8.8.8)
				fi
				sed -i "s/\/POPIP\//$popip/g" "/etc/hostname.gre$index"
				if [ $i -eq 0 ]; then
					typeset -i lastnet
					lastnet=$(dig gre7058.$domainname TXT +short @8.8.8.8 | sed 's/\"//g')
				else
					lastnet=$lastnet-4
				fi
				typeset -i grepopip
				grepopip=$lastnet-2
				sed -i "s/\/GREPOPIP\//10.10.10.$grepopip/g" "/etc/hostname.gre$index"
				typeset -i  grelocalip
				grelocalip=$lastnet-3
				sed -i "s/\/GRELOCALIP\//10.10.10.$grelocalip/g" "/etc/hostname.gre$index"
				if grep -q "ecp384" $file; then
					cat $basedir/src/mikrotik/gre.rsc >> "/tmp/$pophost/$pophost.rsc"
					sed -i "s/\/GREPOPIP\//10.10.10.$grepopip\/g" "/tmp/$pophost/$pophost.rsc"
					sed -i "s/\/HOSTNAME\//$hostname/g" "/tmp/$pophost/$pophost.rsc"
					sed -i "s/\/PUBLICIP\//$publicip/g" "/tmp/$pophost/$pophost.rsc"
				elif grep -q "ecp256" $file; then
					cp $basedir/src/edgeos/scripts/ES-SRCID-_netwatch.sh "/tmp/$pophost/ES-${publichostname}_netwatch.sh" 
					cp $basedir/src/edgeos/scripts/ES-SRCID--updown.sh "/tmp/$pophost/ES-$publichostname-updown.sh"
					cp $basedir/src/edgeos/gre.sh "/tmp/$pophost/"
					sed -i "s/\/GREPOPIP\//10.10.10.$grepopip/g" "/tmp/$pophost/ES-${publichostname}_netwatch.sh"
					sed -i "s/\/GREPOPIP\//10.10.10.$grepopip/g" "/tmp/$pophost/gre.sh"
					sed -i "s/\/PUBLICHOSTNAME\//$publichostname/g" "/tmp/$pophost/ES-${publichostname}_netwatch.sh"
					sed -i "s/\/TUN\//tun$lasttun/g" "/tmp/$pophost/ES-${publichostname}_netwatch.sh"
					sed -i "s/\/TUN\//tun$lasttun/g" "/tmp/$pophost/ES-$publichostname-updown.sh"
					sed -i "s/\/TUN\//tun$lasttun/g" "/tmp/$pophost/gre.sh"
				else
					cp $basedir/src/openbsd/hostname.gre.openbsd "/tmp/$pophost/hostname.gre$lasttun"
					cp $basedir/src/openbsd/hostname.enc.openbsd "/tmp/$pophost/hostname.enc$lasttun"
					sed -i "s/\/PUBLICHOST\//$publichost/g" "/tmp/$pophost/hostname.gre$lasttun"
					sed -i "s/\/PUBLICHOST\//$publichost/g" "/tmp/$pophost/hostname.enc$lasttun"
					sed -i "s/\/X\//$lasttun/g" "/tmp/$pophost/hostname.gre$lasttun"
					sed -i "s/\/X\//$lasttun/g" "/tmp/$pophost/iked.conf.$publichost"
					sed -i "s/\/POPIP\//$popip/g" "/tmp/$pophost/hostname.gre$lasttun"
					sed -i "s/\/PUBLICIP\//$publicip/g" "/tmp/$pophost/hostname.gre$lasttun"
					sed -i "s/\/GREPOPIP\//10.10.10.$grepopip/g" "/tmp/$pophost/hostname.gre$lasttun"
					sed -i "s/\/GRELOCALIP\//10.10.10.$grelocalip/g" "/tmp/$pophost/hostname.gre$lasttun"
				fi
				i=$i+1
			done
			lastnet=$lastnet-4
			echo "update gre7058.$domainname TXT to $lastnet \
			      \n gre18994.$domainname TXT to $lasttun \n"
		      	custom "/etc" "1"
			for file in /etc/hostname.gre? ; do
				sh /etc/netstart $(echo $file | awk -F. '{print $2}')
			done
		;;
		"pf")
			for file in $basedir/src/etc/pf.* ; do
				if [[ -e "$file" ]]; then
					install -o root -g wheel -m 0640  $file /etc/
				fi
			done 
			for vpnc_ip in $(dig vpnc.$domainname A +short @8.8.8.8); do
				echo "$vpnc_ip/32" >> /etc/pf.conf.table.ipsec
			done
			for vpnc_ip in $(dig vpncN.$domainname A +short @8.8.8.8); do
				echo "$vpnc_ip/32" >> "$tmpdir/pf.conf.table.ipsec"
			done
			for vpnc_host in $(dig vpnc.telecomlobby.com TXT +short @8.8.8.8 | sed 's/\"//g'); do
				vpnc_ip=$(dig $vpnc_host A +short @8.8.8.8 | tail -n 1)
				if [[ ! -z $vpnc_ip ]]; then
					echo "$vpnc_ip/32" >> /etc/pf.conf.table.ipsec
				fi
			done
 			for file in $(find /tmp -name "*.rsc"); do
				cat $basedir/src/mikrotik/firewall.rsc >> "$file"
				sed -i "s/\/HOSTNAME\//${hostname}/g" $file
			done
			for file in $(find /etc -maxdepth 1 -name "iked.conf.*") ; do
				tagged=$(echo $file | sed "s/\/etc\/iked.conf.//")
				count=$(dig $tagged A +short @8.8.8.8 | wc -l)
				if [[ $count -gt 1 ]]; then
					iptagged=$(dig $tagged A +short @8.8.8.8 | tail -n 1)
				else
					iptagged=$(dig $tagged A +short @8.8.8.8)
				fi
				sed -i "s/\/TAGGED\//${tagged}/g" /etc/pf.conf.macro.enc.{in,out}	
				sed -i "s/\/IPTAGGED\//${iptagged}/g" /etc/pf.conf.macro.enc.{in,out}
				cat $basedir/src/openbsd/pf.conf.openbsd | head -n 1 >> /etc/pf.conf.macro.enc.in
				cat $basedir/src/openbsd/pf.conf.openbsd | tail -n 1 >> /etc/pf.conf.macro.enc.out
			done
			sed -i '$d' /etc/pf.conf.macro.enc.{in,out}
			
			custom "/etc" "1"
			pfctrl=$(pfctl -nf /etc/pf.conf)
			if [[ -z $pfctrl ]]; then
				echo "PF ruleset OK"
			fi
		;;
		"ospf")
			rcctl enable ospfd
			install -o root -g wheel -m 0600  $basedir/src/etc/ospfd.conf /etc/
			sed -i "s/\/ROUTERID\//$routerid/g" /etc/ospfd.conf
			for file in $(find /etc/ -name "hostname.gre?" -maxdepth 1); do
				x=$(basename $file | cut -d . -f2 | sed "s/gre//g")
				sed -i "s/\/X\//$x/g" /etc/ospfd.conf
				ospfmd5=$(tr -cd '[:alnum:],.' < /dev/urandom | fold -w 15 | head -n 1)
				sed -i "s/\/OSPFMD5\//${ospfmd5}/g" /etc/ospfd.conf
				pophost=$(cat /etc/`basename $file` | head -n 1 | cut -d ' ' -f2 | sed "s/\"//g")
				#popip=$(dig $pophost A +short @8.8.8.8)
				typeset -i latency=$(ping -c4 $pophost | tail -1| awk '{print $4}' | cut -d '/' -f 2 | cut -d . -f1)
				typeset -i metric=$(expr $latency / 2)
				sed -i "s/\/METRIC\//${metric}/g" /etc/ospfd.conf
				cat $basedir/src/openbsd/ospfd.conf.openbsd >> /etc/ospfd.conf	
				if [[ $(ls "/tmp/$pophost/" | grep -c "hostname") -eq 2 ]]; then
					typeset -i lasttun
					lasttun=$(dig gre18994.$domainname TXT +short @8.8.8.8 | sed 's/\"//g')
					lasttun=$lasttun+1
					cp $basedir/src/openbsd/ospfd.conf.openbsd "/tmp/$pophost/ospfd.conf"
					sed -i "s/\/X\//$lasttun/g" "/tmp/$pophost/ospfd.conf"	
					sed -i "s/\/METRIC\//${metric}/g" "/tmp/$pophost/ospfd.conf"	
					sed -i "s/\/OSPFMD5\//${ospfmd5}/g" "/tmp/$pophost/ospfd.conf"
				elif [[ $(ls "/tmp/$pophost/" | grep -c "rsc") -ne 0 ]]; then
					pophostname=$(echo $pophost | cut -d . -f1)
					cp $basedir/src/mikrotik/ospfd.rsc "/tmp/$pophost"
					sed -i "s/\/HOSTNAME\//${hostname}/g" "/tmp/$pophost/ospfd.rsc"
					sed -i "s/\/OSPFMD5\//${ospfmd5}/g" "/tmp/$pophost/ospfd.rsc"
					sed -i "s/\/METRIC\//${metric}/g" "/tmp/$pophost/ospfd.rsc"
					typeset -u pophostname=$pophostname
					sed -i "s/\/POPHOSTNAME\//${pophostname}/g" "/tmp/$pophost/ospfd.rsc"
					greip=$(ifconfig `basename $file | cut -d . -f2` |  grep inet | cut -d ' ' -f2 | tail -n 1)
					grenetwork=$(ipcalc -c $greip / 30 | grep network | awk '{ print $3 }')
					sed -i "s/\/GRENETWORK\//${grenetwork}/g" "/tmp/$pophost/ospfd.rsc"
					cat "/tmp/$pophost/ospfd.rsc" >> "/tmp/$pophost/$pophost.rsc"
				elif [[ $(ls "/tmp/$pophost/" | grep -c "netwatch") -eq 1 ]]; then
					tunif=$(cat "/tmp/$pophost/gre.sh" | awk '{ print $4 }' | grep tun | head -n 1)
					cp $basedir/src/edgeos/ospf.sh "/tmp/$pophost/"
					sed -i "s/\/TUNIF\//${tunif}/g" "/tmp/$pophost/ospf.sh"
					sed -i "s/\/OSPFMD5\//${ospfmd5}/g" "/tmp/$pophost/ospf.sh"
					sed -i "s/\/METRIC\//${metric}/g" "/tmp/$pophost/ospf.sh"
				fi
			done
			cat /etc/ospfd.conf | sed -n -e :a -e '1,12!{P;N;D;};N;ba' > /tmp/ospfd.conf
			mv /tmp/ospfd.conf /etc/ospfd.conf
			echo "}" >> /etc/ospfd.conf
			chmod 600 /etc/ospfd.conf
			custom "/etc" "1"
			pidof_ospfd=$(pidof "ospfd")
			if [[ -z $pidof_ospfd ]]; then
				rcctl start ospfd ||  error_exit "$LINENO: ERROR: OSPFD failed."
			else
				rcctl restart ospfd ||  error_exit "$LINENO: ERROR: OSPFD failed."
			fi
		;;
		"ntpd")
			install -o root -g wheel -m 0644  $basedir/src/etc/ntpd.conf /etc/
			cleanold "/etc/"
			rcctl restart ntpd  ||  error_exit "$LINENO: ERROR: NTPD failed."
		;;	
		"remote")
			
			for file in $(find /tmp -type d -maxdepth 1); do
				filename=$(basename $file)
				typeset -i dots=$(echo $filename| tr -cd '.' | wc -c)
				if [[ $dots -eq 2 ]]; then
					if [[ $(ls $file/ | grep -c "hostname") -eq 2 ]]; then
						tar -cvf "/tmp/$filename.tar" -C /tmp -s /tmp// $file
						sha256 -q "$file.tar" > "/tmp/$filename.sha256"
						if [[ ! -d "/var/www/htdocs/$publichost" ]]; then
							mkdir "/var/www/htdocs/$publichost"
						fi
						mv "/tmp/$filename.tar" "/var/www/htdocs/$publichost"
						mv "/tmp/$filename.sha256" "/var/www/htdocs/$publichost"
						rm -rf $file
					fi
				fi
			done
			if [[ ! -d /etc/ssh/remote_install ]]; then
				mkdir /etc/ssh/remote_install
				chmod g-w /etc/ssh/remote_install
			else
				rm -rf /etc/ssh/remote_install
				mkdir /etc/ssh/remote_install
				chmod g-w /etc/ssh/remote_install
			fi
			for file in $(find $basedir/src/etc/ssh/remote_install/ -type f); do
				filename=$(basename $file)
				if [[ "$filename" != "rc.local" ]]; then
					install -o root -g wheel -m 0640 $file /etc/ssh/remote_install/
				elif [[ "$filename" == "rc.local" ]]; then
					cat $file >> /etc/rc.local
				fi
			done
			custom "/etc/ssh/remote_install" "1"
			install -o root -g wheel -m 0750 $basedir/src/usr/local/sbin/remote-install /usr/local/sbin/
			pidof_remote=$(pidof "remote")
			if [[ -z $pidof_remote ]]; then
				/usr/sbin/sshd -f /etc/ssh/remote_install/remote_install.conf
			else
				kill -9 $(cat /var/run/sshd-remote-install.pid)
				/usr/sbin/sshd -f /etc/ssh/remote_install/remote_install.conf
			fi
			install -o root -g wheel -m 0640 $basedir/src/etc/httpd.conf.acmefirst /etc/httpd.conf
			custom "/etc/" "1"
			httpd -n
			pidof_httpd=$(pidof "httpd")
			if [[ -z $pidof_remote ]]; then
				rcctl enable httpd
				rcctl start httpd ||  error_exit "$LINENO: ERROR: HTTPD failed."
			else
				rcctl restart httpd
			fi
			echo "connecting to remote OpenBSD MESH hosts..."
			for file in $(find /etc -maxdepth 1 -name "iked.conf.*" -type f); do
				if [[ $(grep -c "brainpool512" $file) -eq 1 ]]; then
					remotehost=$(echo $file | sed "s/\/etc\/iked.conf.//")
					ssh-keyscan -p 31137 -t ed25519 $remotehost > /etc/ssh/ssh_known_hosts
					ssh -p 31137 $remotehost -v
				fi
			done
			sleep 31
			
			
			
		;;	
		"httpd")
			case $subphase in
				"basic")	
					(: "${hostname?}") 2>/dev/null || hostname=$(hostname -s)
					(: "${landomainname?}") 2>/dev/null || landomainname=$(hostname | sed "s/`hostname -s`.//")
					install -o root -g wheel -m 0640 $basedir/src/etc/httpd.conf.mime.types /etc
					install -o root -g wheel -m 0640 $basedir/src/etc/httpd.conf /etc
					install -o root -g wheel -m 0640 $basedir/src/etc/httpd.conf.local /etc
					install -o root -g wheel -m 0640 $basedir/src/etc/httpd.conf.vhosts.basic /etc/httpd.conf.vhosts
					custom "/etc" "1"
					if [[ ! -d "/var/www/htdocs/$publichost" ]]; then
						mkdir "/var/www/htdocs/$publichost"
						
					fi
					chown -R wwwftp:www "/var/www/htdocs/$publichost"
					if [[ ! -d "/var/www/htdocs/$hostname.$landomainname" ]]; then
						mkdir "/var/www/htdocs/$hostname.$landomainname"
					fi
					if [[ $(ls "/var/www/htdocs/$publichost/" | grep -c "sha256") -ne 0 ]]; then
						mv "/var/www/htdocs/$publichost/"* "/var/www/htdocs/$hostname.$landomainname"
					fi
					chown -R wwwftp:www "/var/www/htdocs/$hostname.$landomainname"
					rcctl restart httpd
			esac
		;;
		"relayd")
			
			install -o root -g wheel -m 0640 $basedir/src/etc/relayd.conf /etc/
			custom "/etc" "1"
			sed -i "s/\/PUBV6\//${ipv6egress}/g" /etc/relayd.conf
			rcctl enable relayd 
		;;
		"smtpd")
			pkg "smtpd"
		;;
		"powernsd")
			pkg "powernsd"
		;;
	esac
}

case $1 in
	"-I")
		configini=
		if [[ ! -e "/tmp/config.ini" ]]; then
			touch "/tmp/config.ini"
		else
			echo "Type 1 to use /tmp/config.ini "
			read configini 
		fi

		echo "changing IPv4 from dynamic to static on $egressinterface and do a perfect IPv6"
		if [[ $configini -eq 1 ]]; then
			ipv6ctrl=$(cat /tmp/config.ini  | grep ipv6ctrl |cut -d \# -f2)
			case $ipv6ctrl in
				"static")
					ipv6egress=$(cat /tmp/config.ini  | grep ipv6egress |cut -d \# -f2)
					ipv6prefix=$(cat /tmp/config.ini  | grep ipv6prefix |cut -d \# -f2)
					ipv6defrouter=$(cat /tmp/config.ini  | grep ipv6defrouter |cut -d \# -f2)
					;;
				"dynamic")
					ipv6egress=$(slaacctl show interface | grep 2001 | awk 'NR>2' | head -n 1 | cut -d , -f1)
					ipv6prefix=$(slaacctl show interface | grep 2001 | awk 'NR>2' | head -n 1 | cut -d \/ -f2)
					ipv6defrouter=$(netstat -rn -f inet6 | awk 'NR>8' | head -n 1 | awk '{print $2}')
					;;
			esac
			configuration "static"
		else
			ctrl=
			while [ -z $ctrl ]
			do
				echo 'Go ahead type 1 '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					echo "static#$ctrl" > /tmp/config.ini
					while [ -z $ipv6ctrl ]
						do
							echo -n 'Is the IPv6 address on the egress interface static or dynamic?\n'
							read ipv6ctrl
							echo "ipv6ctrl#$ipv6ctrl" >> /tmp/config.ini
							case $ipv6ctrl in
								"static")
									echo -n 'Type the IPv6 address without prefixlen '
									read ipv6egress
									echo -n 'Type the prefixlen '
									read ipv6prefix
									echo -n 'Type the IPv6 default route '
									read ipv6defrouter
									echo "ipv6egress#$ipv6egress" >> /tmp/config.ini
									echo "ipv6prefix#$ipv6prefix" >> /tmp/config.ini
									echo "ipv6defrouter#$ipv6defrouter" >> /tmp/config.ini
									;;
								"dynamic")
									ipv6egress=$(slaacctl show interface | grep 2001 | awk 'NR>2' | head -n 1 | cut -d , -f1)
									ipv6prefix=$(slaacctl show interface | grep 2001 | awk 'NR>2' | head -n 1 | cut -d \/ -f2)
									ipv6defrouter=$(netstat -rn -f inet6 | awk 'NR>8' | head -n 1 | awk '{print $2}')
									;;
								*)
									echo -n "Please type static or dynamic \n"
									continue
									;;
							esac
						done	
					configuration "static"
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			    
			done		
		fi
		echo "changing installurl"
		if [[ $configini -eq 1 ]]; then
			install -o root -g wheel -m 0644 $basedir/src/etc/installurl /etc/
		else
			ctrl=
			while [ -z $ctrl ]
			do
				echo 'Go ahead type 1 '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					install -o root -g wheel -m 0644 $basedir/src/etc/installurl /etc/
					echo "installurl#$ctrl" >> /tmp/config.ini
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			    
			done		
		fi
		echo "adding basic shell packages"
		if [[ $configini -eq 1 ]]; then
			pkg "shell"
		else
		ctrl=
			while [ -z $ctrl ]
			do
				echo 'Go ahead type 1 '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					pkg "shell"
					echo "shell#$ctrl" >> /tmp/config.ini
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			    
			done
		fi

		rcctl disable sndiod
		rcctl disable check_quotas
		rcctl stop sndiod

		echo "configuring users"
		if [[ $configini -eq 1 ]]; then
			if [ ! -d /root/Bin ]; then 
				mkdir /root/Bin
				chmod 700 /root/Bin
			fi
			if [ ! -d /root/Backups ]; then 
				mkdir /root/Backups
				chmod 700 /root/Backups
			fi
			if [ ! -d /home/taglio/Bin ]; then 
				mkdir /home/taglio/Bin 
				chown taglio:wheel /home/taglio/Bin
			fi
			
			configuration "users"
			configuration "scripts"
		else
			ctrl=
			while [ -z $ctrl ]
			do
				echo 'Go ahead type 1 '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					if [ ! -d /root/Bin ]; then 
						mkdir /root/Bin
						chmod 700 /root/Bin
					fi
					if [ ! -d /root/Backups ]; then 
						mkdir /root/Backups
						chmod 700 /root/Backups
					fi
					if [ ! -d /home/taglio/Bin ]; then 
						mkdir /home/taglio/Bin 
						chown taglio:wheel /home/taglio/Bin
					fi
					
					configuration "users"
					configuration "scripts"
					echo "users#$ctrl" >> /tmp/config.ini
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			    
			done
		fi
		if [[ $configini -eq 1 ]]; then
			hostname=$(cat /tmp/config.ini  | grep hostname |cut -d \# -f2)
		else
			hostname=
			while [ -z $hostname ]
			do
				echo 'Type the hostname '
				read hostname
				echo "hostname#$hostname" >> /tmp/config.ini
			done
		fi
		if [[ $configini -eq 1 ]]; then
			landomainname=$(cat /tmp/config.ini  | grep landomainname |cut -d \# -f2)
		else
			landomainname=
			while [ -z $landomainname ]
			do
				echo 'Type the LAN domain name '
				read landomainname
				echo "landomainname#$landomainname" >> /tmp/config.ini
			done
		fi
		if [[ $configini -eq 1 ]]; then
			routerid=$(cat /tmp/config.ini  | grep routerid |cut -d \# -f2)
		else
			routerid=
			while [ -z $routerid ]
			do
				echo 'Type the routerid '
				read routerid
				echo "routerid#$routerid" >> /tmp/config.ini
			done
		fi
		srcid=$(print $publichost | cut -d . -f1)
		typeset -u publichostname=$srcid
		domainname=$(print $publichost | sed "s/$srcid.//")
		for a in $(dig ipsec20591.$domainname TXT +short @8.8.8.8 | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
			b=$(echo $a | cut -d : -f1)
			if [ "$b" = "$srcid" ]; then
				srcid=$(echo $a | cut -d : -f2)
			fi
		done
		echo "configuring basic"
		if [[ $configini -eq 1 ]]; then
			configuration "basic" 
		else
			ctrl=
			while [ -z $ctrl ]
			do
				echo 'Go ahead type 1 '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					configuration "basic" 
					echo "basic#$ctrl" >> /tmp/config.ini
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			    
			done
		fi
		echo "configuring unbound \n"
		if [[ $configini -eq 1 ]]; then
			sleep 3
			configuration "unbound" "local"
		else
			ctrl=
			echo 'Go ahead type 1 '
			read ctrl
			if [[ "$ctrl" -eq 1 ]]; then
				configuration "unbound" "local"
				echo "unbound#$ctrl" >> /tmp/config.ini
			else
				error_exit "$LINENO: EXIT FROM USER." 
			fi
		fi
		echo "configuring ssh \n"
		if [[ $configini -eq 1 ]]; then
			configuration "ssh" "public"
		else
			ctrl=
			while [ -z $ctrl ]
			do
				echo 'Go ahead type 1 '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					configuration "ssh" "public"
					echo "ssh#$ctrl" >> /tmp/config.ini
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			done
		fi
		echo "configuring ipsec \
			\nplease add ${publicip}/32 to \
			\n/etc/pf.conf/table.ipsec \
			\nto the others nodes and reload them! \
			\n"
		if [[ $configini -eq 1 ]]; then
			configuration "ipsec" 
		else
			ctrl=
			while [ -z $ctrl ]
			do
				echo 'Go ahead type 1 '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					configuration "ipsec" 
					echo "ipsec#$ctrl" >> /tmp/config.ini
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			done
		fi
		if [[ $configini -eq 1 ]]; then
			configuration "gre" 
		else
			echo "configuring gre interfaces \
				\n"
			ctrl=
			while [ -z $ctrl ]
			do
				echo 'Go ahead type 1 '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					configuration "gre" 
					echo "gre#$ctrl" >> /tmp/config.ini
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			done
		fi

		echo "configuring PF firewall and others environments \n"
		if [[ $configini -eq 1 ]]; then
			configuration "pf"
		else 
			ctrl=
			while [ -z $ctrl ]
			do
				echo 'Go ahead type 1 '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					configuration "pf" 
					echo "pf#$ctrl" >> /tmp/config.ini
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			done
		fi

		echo "configuring OSPF routing protocol \n"
		if [[ $configini -eq 1 ]]; then
			configuration "ospf"
		else 
			ctrl=
			while [ -z $ctrl ]
			do
				echo 'Go ahead type 1 '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					configuration "ospf" 
					echo "ospf#$ctrl" >> /tmp/config.ini
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			done
		fi

		echo "preparing archives, signing them, starting httpd default host and start the remote install procedure \n"
		if [[ $configini -eq 1 ]]; then
			configuration "remote"
		else 
			ctrl=
			while [ -z $ctrl ]
			do
				echo 'Go ahead type 1 '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					configuration "remote" 
					echo "remote#$ctrl" >> /tmp/config.ini
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			done
		fi
		echo "configuring unbound for IPSec MESH network \n"
		if [[ $configini -eq 1 ]]; then
			upgrade "unbound"
		else 
			ctrl=
			while [ -z $ctrl ]
			do
				echo 'Go ahead type 1 '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					upgrade "unbound" 
					echo "unboundipsec#$ctrl" >> /tmp/config.ini
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			done
		fi
		echo "configuring sshd for IPSec MESH network with certificates\n"
		if [[ $configini -eq 1 ]]; then
			upgrade "ssh"
		else 
			ctrl=
			while [ -z $ctrl ]
			do
				echo 'Go ahead type 1 '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					upgrade "ssh" 
					echo "sshipsec#$ctrl" >> /tmp/config.ini
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			done
		fi
		pfctl -f /etc/pf.conf
		rcctl restart syslogd
		echo "configuring basic httpd for IPSec MESH network operations\n"
		if [[ $configini -eq 1 ]]; then
			configuration "httpd" "basic"
		else 
			ctrl=
			while [ -z $ctrl ]
			do
				echo 'Go ahead type 1 '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					configuration "httpd" "basic" 
					echo "httpdbasic#$ctrl" >> /tmp/config.ini
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			done
		fi
		install -o root -g wheel -m 0640 src/etc/ntpd.conf /etc
		rcctl restart ntpd
		pfctl -f /etc/pf.conf
		rcctl restart syslogd
		sh "$basedir/$app" -A sslcareq
		echo "You successfully installed and connected a new OpenBSD MESH guerrilla host"	
	;;
	"-U")
		if [[ $# -ne 2 ]]; then
			print $0 "UPGRADE option must be followed by: \
				\n \
				\nall    -> redo the installation and reset all the system \
				\nstatic \
				\nbasic   \
				\nusers   \
				\nscripts \
				\nunbound_ipsec\
				\nssh_ipsec\
				\nipsec  \
				\ngre   \
				\npf   \
				\nospf   \
				\nremote   \
				\nremoteinstall \
				\nrelayd   \
				\nnewhost \
				\nscripts \
				\ndyndnspop \
				\nhttpdbasic \
				\n"
			exit 1 
		fi
		case $2 in
			"static")
				backup "static"
				configuration "static"
			;;
			"basic")
				pkg "shell"
				backup "basic"	
				configuration "basic"
			;;
			"static")
				backup "static"
				configuration "static"
			;;
			"users")
				backup "users"
				configuration "users"
			;;
			"scripts")
				backup "scripts"
				configuration "scripts"
			;;
			"unbound_ipsec")
				backup "unbound"
				upgrade "unbound"
			;;
			"ssh_ipsec")
				backup "ssh"
				upgrade "ssh"
			;;
			"ipsec")
				backup "ipsec"
				upgrade "ipsec"
			;;
			"gre")
				upgrade "gre"
			;;
			"pf")
				backup "pf"
				upgrade "pf"
			;;
			"ospf")
				upgrade "ospf"
			;;
			"remote")
				backup "remote"
				upgrade "remote"
			;;
			"httpdbasic")
				backup "httpdbasic"
				configuration "httpd" "basic"
			;;
			"remoteinstall")
				upgrade "remoteinstall"
			;;
			"relayd")
				upgrade "relayd"
			;;
			"newhost")
				upgrade "newhost"
			;;
			"scripts")
				upgrade "scripts"
			;;
			"dyndnspop")
				upgrade "dyndnspop"
			;;
			"file")
				upgrade "file"
			;;
			"all")
				sh setup_node -I
				
			;;
		esac
	;;
	"-D")
		if [[ $# -ne 2 ]]; then
			print $0 "DAEMONS option must be followed by: \
				\n \
				\npowernsd \
				\nhttpd \
				\nsmtpd  \
				\nimapd   \
				\n"
			exit 1 
		fi
		case $2 in
			"powernsd")
				echo "configuring nsd and powerdns"
				configuration "powernsd"	
			;;
			"smtpd")
				echo "configuring smtpd"
				configuration "smtpd"
			;;
		esac
			
	;;
	"-A")
		if [[ $# -ne 2 ]]; then
			print $0 "ADMINISTRATE option must be followed by: \
				\n \
				\ncleanlast \
				\nsslcareq \
				\n"
			exit 1 
		fi
		case $2 in
			"cleanlast")
				admin "cleanlast"
			;;
			"sslcareq")
				admin "sslcareq"
			;;
		esac		
	;;
	*)
		exit 1
	;;
esac

