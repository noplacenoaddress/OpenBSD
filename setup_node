#!/bin/ksh

#	$Telecomlobby: setup_node,v 0.1 11/3/2021 21:01:04 taglio$
#
#unbound: https://blog.c6h12o6.org/post/unbound-dnssec-dns-over-tls/
#sshd: https:/github.com/vedetta-com/vedetta/blob/master/src/usr/local/share/doc/vedetta/OpenSSH_Principals.md	


set -o errexit
set -o nounset

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/root/Bin
UID=$(id -u)

if [[ $UID -ne 0 ]]; then
	print $0 "you've got to run $0 as UID=0 \n"
	exit 1
fi

function error_exit {
    echo "${app}: ${1:-"Unknown Error"}" 1>&2
    exit 1
}

app=$(basename $0)
backups="/root/Backups"
publicip=$(ifconfig egress | grep inet |grep -v inet6 | cut -d ' ' -f2)
dyndns=$(host -t a cat-01.hopto.org | cut -d ' ' -f4)
basedir=$(pwd)
tmpdir=$(mktemp -d)


function pidof {
	ps axc -o pid,command | awk "\$2~/^`echo $1`\$/ {print \$1}"
}

function pkg {
	phase=$1

	case $phase in
		"shell")
			pkg_add colorls nano wget fping iperf uptimed oidentd
			;;
	esac
}

function cleanold {
	directory=$1
	for file in $directory*.old; do
		if [[ -e "$file" ]]; then
			mv $file $backups
		fi
	done
	for file in $directory.*.old; do
		if [[ -e "$file" ]]; then
			mv $file $backups
		fi	
	done
}


function configuration {
	phase=$1
	if [[ $# -eq 2 ]]; then
		subphase=$2
	fi
	case $phase in
		"basic")
			echo "dot files"
			for file in src/home/taglio/.*; do
				if [[ -e "$file" ]]; then
					install -o taglio -g wheel -m 0640  $file /home/taglio/ 
				fi
			done
			cleanold "/home/taglio/"
			for file in src/root/.*; do
				if [[ -e "$file" ]]; then
					install -o root -g wheel -m 0640  $file /root/
				fi
			done
			cleanold "/root/"
			echo "dhclient, resolv.conf.tail and doas.conf"
			install -o root -g wheel -m 0644  src/etc/{dhclient.conf,resolv.conf.tail,doas.conf} /etc/
			install -o root -g wheel -m 0640  src/etc/hostname.vio0 /etc/
			echo "vether"
			install -o root -g wheel -m 0644  src/etc/hostname.vether0 /etc/
			echo "configuring iperf uptimed and oidentd"
			pidof_uptimed=$(pidof "uptimed")
			if [[ -z $pidof_uptimed ]]; then
				rcctl enable uptimed
				rcctl start uptimed || error_exit "$LINENO: ERROR: UPTIMED failed."
			else
				rcctl restart uptimed || error_exit "$LINENO: ERROR: UPTIMED failed."
			fi
			install -o root -g wheel -m 0640  src/etc/rc.local /etc/
			cleanold "/etc/"
			cd /tmp
			nohup sh /etc/netstart vio0 & 
			nohup sh /etc/netstart vether0 &
			cd $basedir
			sh /etc/rc.local
			;;	
		"users")
			echo "vmail, dsync, _iperfd, wwwuser"
			if ! getent passwd vmail 1>&-; then 
				useradd -m -u 2000 -g =uid -c "Virtual Mail" -d /var/vmail -s /sbin/nologin vmail
			fi
			if ! getent passwd dsync  1>&-; then 
				useradd -m -u 2001 -g =uid -c "Dsync Replication" -d /home/dsync -s /bin/ksh dsync
			fi
			if ! getent passwd _iperfd  1>&-; then 
				useradd -m -u 2002 -g =uid -c "Iperfd Daemon" -d /nonexistent -s /sbin/nologin _iperfd
			fi
			if ! getent passwd wwwftp  1>&-; then 
				useradd -u 2003 -g =uid -c "WWW Ftpd user" -d /var/www/htdocs -s /root/Bin/fake_shell.sh wwwftp
			fi
			for file in src/home/taglio/Bin/*; do
				if [[ -e "$file" ]]; then
					install -o taglio -g wheel -m 0750  $file /home/taglio/Bin/
					mv $file $backups
				fi
			done
			if [[ ! -e /home/taglio/.ssh/id_ed25519 ]]; then
				doas -u taglio ssh-keygen -t ed25519 -N "" -f /home/taglio/.ssh/id_ed25519
			fi
			;;
		"scripts")
			for file in src/root/Bin/*.sh; do
				if [[ -e "$file" ]]; then
					install -o root -g wheel -m 0700  $file /root/Bin/
				fi
			done
			cleanold "/root/Bin/"
			;;
		"unbound")
			pidof_unbound=$(pidof "unbound")
			if [[ -z $pidof_unbound ]]; then
				rcctl enable unbound
			fi
			case $subphase in 
				"local")
					unbound-anchor -a /var/unbound/db/root.key
					wget --no-check-certificate https://192.0.47.9/domain/named.root -O /var/unbound/db/root.hints
					install -o _unbound -g _unbound -m 0750  src/var/unbound/db/ca-certificates.crt /var/unbound/db/
					chown _unbound:_unbound /var/unbound/db/*
					install -o _unbound -g _unbound -m 0750  src/var/unbound/etc/unbound-local.conf /var/unbound/etc/unbound.conf
					install -o _unbound -g _unbound -m 0750  src/var/unbound/etc/remote-control.conf /var/unbound/etc/
					install -o _unbound -g _unbound -m 0750  src/var/unbound/etc/forward-zone.conf /var/unbound/etc/
					if [[ -z $pidof_unbound ]]; then
						rcctl start unbound ||  error_exit "$LINENO: ERROR: UNBOUND failed."
						
					else
						rcctl restart unbound ||  error_exit "$LINENO: ERROR: UNBOUND failed."
					fi
					cleanold "/var/unbound/etc/"
					;;
				"network")
					install -o _unbound -g _unbound -m 0750  src/var/unbound/etc/unbound.conf /var/unbound/etc/unbound.conf
					install -o _unbound -g _unbound -m 0750  src/var/unbound/etc/stub-zone.conf /var/unbound/etc/stub-zone.conf
					rcctl restart unbound ||  error_exit "$LINENO: ERROR: UNBOUND failed."
					cleanold "/var/unbound/etc/"
					;;
			esac
			;;
		"ssh") 
			publickey=$(ssh-keyscan -t ed25519 ::1 | sed "s/::1/[$publicip,$routerid]/")
			if grep -q "$publickey" src/etc/ssh/ssh_known_hosts; then
				echo $publickey >> src/etc/ssh/ssh_known_hosts
			fi
			sshfp=$(ssh-keyscan -D -t ed25519 ::1 | sed "s/::1/$hostname/")
			echo $sshfp > conf/sshfp
			echo -n "please add \
			\n${publickey} \
			\nto ~/.ssh/known_hosts \
			\nto the others nodes \
			\nplease add \
			\n${sshfp} \
			\nto /var/nsd/zones/master/telecom.lobby.zone in cyberanarkhia \
			\n"
			ctrl=
			while [ -z $ctrl ]
			do
				echo -n 'waiting.. press 1 when done '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					cd "$basedir/../"
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			    
			done
			;;
		"ipsec")
			rm -rf /etc/iked
			mkdir -p /etc/iked/{ca,certs,crls,export,private,pubkeys}
			mkdir -p /etc/iked/pubkeys/{ipv4,ipv6,fqdn,ufqdn}
			cd $basedir
			install -o root -g wheel -m 0640  src/etc/iked/ca/ca.crt /etc/iked/ca/
			openssl pkcs12 -in "/tmp/$publichost.p12" -nocerts -out /etc/iked/private/local.key
			openssl pkcs12 -in "/tmp/$publichost.p12" -clcerts -nokeys -out "/etc/iked/certs/$publichost.crt"
			openssl x509 -pubkey -noout -in "/etc/iked/certs/$publichost.crt"  > /etc/iked/local.pub
			rcctl enable iked
			rcctl set iked flags "-vv"
			for file in src/etc/iked.conf* ; do
				if [[ -e "$file" ]]; then
					install -o root -g wheel -m 0640  $file /etc/
				fi
			done
			install -o root -g wheel -m 0640  src/etc/iked.conf /etc/
			rcctl start iked ||  error_exit "$LINENO: ERROR: IKED failed."
			cleanold "/etc/" 
			;;
		"gre")
			for file in src/etc/hostname.gre? ; do
				if [[ -e "$file" ]]; then
					install -o root -g wheel -m 0700  $file /etc/
					sh	 /etc/netstart $(echo $file | awk -F. '{print $2}')
				fi
			done
			cleanold "/etc/"
			;;
		"pf")
			for file in src/etc/pf.* ; do
				if [[ -e "$file" ]]; then
					install -o root -g wheel -m 0700  $file /etc/
				fi
			done 
			cleanold "/etc/"
			pfctl -nf /etc/pf.conf ||  error_exit "$LINENO: ERROR: PF failed."
			pfctl -f /etc/pf.conf
			;;
		"ospf")
			rcctl enable ospfd
			install -o root -g wheel -m 0600  src/etc/ospfd.conf /etc/
			cleanold "/etc/"
			rcctl start ospfd ||  error_exit "$LINENO: ERROR: OSPFD failed."
			;;
		"ntpd")
			install -o root -g wheel -m 0644  src/etc/ntpd.conf /etc/
			cleanold "/etc/"
			rcctl restart ntpd  ||  error_exit "$LINENO: ERROR: NTPD failed."
			;;		
	esac
}

echo "changing installurl"
ctrl=
while [ -z $ctrl ]
do
	echo -n 'Go ahead type 1 '
	read ctrl
	if [[ "$ctrl" -eq 1 ]]; then
		install -o root -g wheel -m 0644 src/etc/installurl /etc/
	else
		error_exit "$LINENO: EXIT FROM USER." 
	fi
    
done		
echo "adding basic shell packages"
ctrl=
while [ -z $ctrl ]
do
	echo -n 'Go ahead type 1 '
	read ctrl
	if [[ "$ctrl" -eq 1 ]]; then
		pkg "shell"
	else
		error_exit "$LINENO: EXIT FROM USER." 
	fi
    
done
echo "installing automatic update \n"
if [[ ! -e "/etc/daily.local" ]]; then
	install -o root -g wheel -m 0640  src/etc/daily.local /etc/
elif ! grep -q "pkg_add" "/etc/daily.local"; then
	cat src/etc/daily.local >> "/etc/daily.local"
fi
rcctl disable sndiod
rcctl stop sndiod
rcctl disable check_quotas	
echo "configuring users"
ctrl=
while [ -z $ctrl ]
do
	echo -n 'Go ahead type 1 '
	read ctrl
	if [[ "$ctrl" -eq 1 ]]; then
		if [ ! -d /root/Bin ]; then 
			mkdir /root/Bin
			chmod 700 /root/Bin
		fi
		if [ ! -d /root/Backups ]; then 
			mkdir /root/Backups
			chmod 700 /root/Backups
		fi
		if [ ! -d /home/taglio/Bin ]; then 
			mkdir /home/taglio/Bin 
			chown taglio:wheel /home/taglio/Bin
		fi
		
		configuration "users"
		configuration "scripts"
	else
		error_exit "$LINENO: EXIT FROM USER." 
	fi
    
done
	
hostname=
while [ -z $hostname ]
do
	echo -n 'Type the hostname '
	read hostname
	echo $hostname > conf/hostname
	find . -type f | xargs -I {} sed -i "s/\/HOSTNAME\//$hostname/g" {}
done
routerid=
while [ -z $routerid ]
do
	echo -n 'Type the routerid '
	read routerid
	echo $routerid > conf/routerid
	find . -type f | xargs -I {} sed -i "s/\/ROUTERID\//$routerid/g" {}
done
publichost=
while [ -z $publichost ]
do
	echo -n 'Type the publichost '
	read publichost
	echo $publichost > conf/publichost
	find . -type f | xargs -I {} sed -i "s/\/PUBLICHOST\//$publichost/g" {}
done

echo $publicip > conf/publicip
echo $dyndns > conf/dyndns
find . -type f | xargs -I {} sed -i "s/\/PUBLICIP\//$publicip/g" {}
find . -type f | xargs -I {} sed -i "s/\/DYNDNS\//$dyndns/g" {}


echo "configuring basic"
ctrl=
while [ -z $ctrl ]
do
	echo -n 'Go ahead type 1 '
	read ctrl
	if [[ "$ctrl" -eq 1 ]]; then
		configuration "basic" 
	else
		error_exit "$LINENO: EXIT FROM USER." 
	fi
    
done
echo "configuring unbound"
ctrl=
while [ -z $ctrl ]
do
	echo -n 'Go ahead type 1 '
	read ctrl
	if [[ "$ctrl" -eq 1 ]]; then
		configuration "unbound" "local"
	else
		error_exit "$LINENO: EXIT FROM USER." 
	fi
    
done
echo -n "configuring ssh \n"
ctrl=
while [ -z $ctrl ]
do
	echo -n 'Go ahead type 1 '
	read ctrl
	if [[ "$ctrl" -eq 1 ]]; then
		configuration "ssh" "public"
	else
		error_exit "$LINENO: EXIT FROM USER." 
	fi
done
echo -n "configuring ipsec \
	\nplease add ${publicip}/32 to \
	\n/etc/pf.conf/table.ipsec \
	\nto the others nodes and reload them! \
	\n"
ctrl=
while [ -z $ctrl ]
do
	echo -n 'Go ahead type 1 '
	read ctrl
	if [[ "$ctrl" -eq 1 ]]; then
		configuration "ipsec" 
	else
		error_exit "$LINENO: EXIT FROM USER." 
	fi
done


