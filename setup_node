#!/bin/ksh

#	$Telecomlobby: setup_node,v 0.1 11/3/2021 21:01:04 taglio$
#
#unbound: https://blog.c6h12o6.org/post/unbound-dnssec-dns-over-tls/
#sshd: https:/github.com/vedetta-com/vedetta/blob/master/src/usr/local/share/doc/vedetta/OpenSSH_Principals.md	


set -o errexit
set -o nounset

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/root/Bin
UID=$(id -u)

if [[ $UID -ne 0 ]]; then
	print $0 "you've got to run $0 as UID=0 \n"
	exit 1
fi

function error_exit {
    echo "${app}: ${1:-"Unknown Error"}" 1>&2
    exit 1
}

app=$(basename $0)
backups="/root/Backups"
publicip=$(ifconfig egress | grep inet |grep -v inet6 | cut -d ' ' -f2)
publichost=$(dig -x $publicip +short @8.8.8.8 | sed 's/.$//')
dyndns=$(host -t a cat-01.hopto.org | cut -d ' ' -f4)
basedir=$(pwd)
tmpdir=$(mktemp -d)


function pidof {
	ps axc -o pid,command | awk "\$2~/^`echo $1`\$/ {print \$1}"
}

function pkg {
	phase=$1

	case $phase in
		"shell")
			pkg_add colorls nano wget fping iperf uptimed oidentd sqlite3 \
				nmap tor
			;;
	esac
}

function cleanold {
	directory=$1
	for file in $directory*.old; do
		if [[ -e "$file" ]]; then
			mv $file $backups
		fi
	done
	for file in $directory.*.old; do
		if [[ -e "$file" ]]; then
			mv $file $backups
		fi	
	done
}


function configuration {
	phase=$1
	if [[ $# -eq 2 ]]; then
		subphase=$2
	fi
	case $phase in
		"basic")
			echo "dot files"
			for file in src/home/taglio/.*; do
				if [[ -e "$file" ]]; then
					install -o taglio -g wheel -m 0640  $file /home/taglio/ 
				fi
			done
			cleanold "/home/taglio/"
			for file in src/root/.*; do
				if [[ -e "$file" ]]; then
					install -o root -g wheel -m 0640  $file /root/
				fi
			done
			cleanold "/root/"
			echo "timezone from public ip \n"
			tmp=$(mktemp)
			curl "http://ipinfo.io/$publicip" > $tmp
			iptmz=$(cat $tmp | grep timezone | cut -d \" -f4)
			rm -rf {/etc/localtime,$tmp}
			ln -fs "/usr/share/zoneinfo/$iptmz" /etc/localtime
			echo "installing automatic update \n"
			if [[ ! -e "/etc/daily.local" ]]; then
				install -o root -g wheel -m 0640  src/etc/daily.local /etc/
			elif ! grep -q "pkg_add" "/etc/daily.local"; then
				cat src/etc/daily.local >> "/etc/daily.local"
			fi
			echo "dhclient, resolv.conf.tail, doas.conf, myname and sysctl.conf \n"
			install -o root -g wheel -m 0644  src/etc/{dhclient.conf,resolv.conf.tail,doas.conf,myname,sysctl.conf} /etc/
			install -o root -g wheel -m 0640  src/etc/hostname.vio0 /etc/
			echo "vether"
			install -o root -g wheel -m 0644  src/etc/hostname.vether0 /etc/
			echo "configuring iperf uptimed and oidentd \n"
			pidof_uptimed=$(pidof "uptimed")
			if [[ -z $pidof_uptimed ]]; then
				rcctl enable uptimed
				rcctl start uptimed || error_exit "$LINENO: ERROR: UPTIMED failed."
			else
				rcctl restart uptimed || error_exit "$LINENO: ERROR: UPTIMED failed."
			fi
			install -o root -g wheel -m 0640  src/etc/rc.local /etc/
			cleanold "/etc/"
			cd /tmp
			nohup sh /etc/netstart vio0 & 
			nohup sh /etc/netstart vether0 &
			cd $basedir
			sh /etc/rc.local
			;;	
		"users")
			echo "vmail, dsync, _iperfd, wwwuser"
			if ! getent passwd vmail 1>&-; then 
				useradd -m -u 2000 -g =uid -c "Virtual Mail" -d /var/vmail -s /sbin/nologin vmail
			fi
			if ! getent passwd dsync  1>&-; then 
				useradd -m -u 2001 -g =uid -c "Dsync Replication" -d /home/dsync -s /bin/ksh dsync
			fi
			if ! getent passwd _iperfd  1>&-; then 
				useradd -m -u 2002 -g =uid -c "Iperfd Daemon" -d /nonexistent -s /sbin/nologin _iperfd
			fi
			if ! getent passwd wwwftp  1>&-; then 
				useradd -u 2003 -g =uid -c "WWW Ftpd user" -d /var/www/htdocs -s /root/Bin/fake_shell.sh wwwftp
			fi
			for file in src/home/taglio/Bin/*; do
				if [[ -e "$file" ]]; then
					install -o taglio -g wheel -m 0750  $file /home/taglio/Bin/
					mv $file $backups
				fi
			done
			if [[ ! -e /home/taglio/.ssh/id_ed25519 ]]; then
				doas -u taglio ssh-keygen -t ed25519 -N "" -f /home/taglio/.ssh/id_ed25519
			fi
			;;
		"scripts")
			for file in src/root/Bin/*.sh; do
				if [[ -e "$file" ]]; then
					install -o root -g wheel -m 0700  $file /root/Bin/
				fi
			done
			cleanold "/root/Bin/"
			;;
		"unbound")
			pidof_unbound=$(pidof "unbound")
			if [[ -z $pidof_unbound ]]; then
				rcctl enable unbound
			fi
			case $subphase in 
				"local")
					unbound-anchor -a /var/unbound/db/root.key
					wget --no-check-certificate https://192.0.47.9/domain/named.root -O /var/unbound/db/root.hints
					install -o _unbound -g _unbound -m 0750  src/var/unbound/db/ca-certificates.crt /var/unbound/db/
					chown _unbound:_unbound /var/unbound/db/*
					install -o _unbound -g _unbound -m 0750  src/var/unbound/etc/unbound-local.conf /var/unbound/etc/unbound.conf
					install -o _unbound -g _unbound -m 0750  src/var/unbound/etc/remote-control.conf /var/unbound/etc/
					install -o _unbound -g _unbound -m 0750  src/var/unbound/etc/forward-zone.conf /var/unbound/etc/
					if [[ -z $pidof_unbound ]]; then
						rcctl start unbound ||  error_exit "$LINENO: ERROR: UNBOUND failed."
						
					else
						rcctl restart unbound ||  error_exit "$LINENO: ERROR: UNBOUND failed."
					fi
					cleanold "/var/unbound/etc/"
					;;
				"network")
					install -o _unbound -g _unbound -m 0750  src/var/unbound/etc/unbound.conf /var/unbound/etc/unbound.conf
					install -o _unbound -g _unbound -m 0750  src/var/unbound/etc/stub-zone.conf /var/unbound/etc/stub-zone.conf
					rcctl restart unbound ||  error_exit "$LINENO: ERROR: UNBOUND failed."
					cleanold "/var/unbound/etc/"
					;;
			esac
			;;		
		"ssh") 
			publickey=$(ssh-keyscan -t ed25519 ::1 | sed "s/::1/[$publicip,$routerid]/")
			if grep -q "$publickey" src/etc/ssh/ssh_known_hosts; then
				echo $publickey >> src/etc/ssh/ssh_known_hosts
			fi
			sshfp=$(ssh-keyscan -D -t ed25519 ::1 | sed "s/::1/$hostname/")
			echo $sshfp > conf/sshfp
			echo -n "please add \
			\n${publickey} \
			\nto ~/.ssh/known_hosts \
			\nto the others nodes \
			\nplease add \
			\n${sshfp} \
			\nto /var/nsd/zones/master/telecom.lobby.zone in cyberanarkhia \
			\n"
			ctrl=
			while [ -z $ctrl ]
			do
				echo -n 'waiting.. press 1 when done '
				read ctrl
				if [[ "$ctrl" -eq 1 ]]; then
					cd "$basedir/../"
				else
					error_exit "$LINENO: EXIT FROM USER." 
				fi
			    
			done
			;;
		"ipsec")
			if [[ -e "/etc/iked.conf" ]]; then
				rm -rf /etc/{iked,iked.conf,iked.conf.*}
			else
				rm -rf /etc/iked
			fi
			mkdir -p /etc/iked/{ca,certs,crls,export,private,pubkeys}
			mkdir -p /etc/iked/pubkeys/{ipv4,ipv6,fqdn,ufqdn}
			cd $basedir
			install -o root -g wheel -m 0640  src/etc/iked/ca/ca.crt /etc/iked/ca/	
			openssl pkcs12 -in "/tmp/$publichost.p12" -nocerts -passin pass:123456789 -passout pass:123456789 -out /etc/iked/private/local.key
			openssl pkcs12 -in "/tmp/$publichost.p12" -clcerts -nokeys -passin pass:123456789 -passout pass:123456789 -out "/etc/iked/certs/$publichost.crt"
			openssl x509 -pubkey -noout -passin pass:123456789 -in "/etc/iked/certs/$publichost.crt"  > /etc/iked/local.pub
			rcctl enable iked
			rcctl set iked flags "-vv"
			typeset -i i=0
			install -o root -g wheel -m 0640  src/etc/iked.conf /etc/
			for vpnc_ip in $(dig vpnc.$domainname A +short @8.8.8.8)
			do
				vpnc_host=$(dig -x $vpnc_ip +short @8.8.8.8 | sed 's/.$//')
				vpnc_ips[i]="$vpnc_ip"
				vpnc_hosts[i]="$vpnc_host"
				if [ ! -d "/tmp/$vpnc_host" ]; then
					mkdir "/tmp/$vpnc_host"
				else
					rm -rf "/tmp/$vpnc_host"
					mkdir "/tmp/$vpnc_host"
				fi
				echo include \"/etc/iked.conf.$vpnc_host\" >> /etc/iked.conf
				if [[ $(nc -w1  $vpnc_ip 22 | grep -c "ROSSSH") -eq 1 ]]; then
					install -o root -g wheel -m 0640 src/etc/iked.conf.mikrotik "/etc/iked.conf.$vpnc_host"
					cp src/mikrotik/ipsec.rsc "/tmp/$vpnc_host/$vpnc_host.rsc"
					sed -i "s/\/POPIP\//$vpnc_ip/g" "/tmp/$vpnc_host/$vpnc_host.rsc"
					sed -i "s/\/POP\//$vpnc_ip/g" "/tmp/$vpnc_host/$vpnc_host.rsc"
					echo "use /tmp/$vpnc_host/$vpnc_host.rsc in your Mikrotik endpoint \n"
				elif [[ $(nc -w1  $vpnc_ip 22 | grep -c "ROSSSH") -eq 0 ]]; then
					install -o root -g wheel -m 0640 src/etc/iked.conf.openbsd "/etc/iked.conf.$vpnc_host"
					cp src/openbsd/iked.conf.openbsd "/tmp/$vpnc_host/iked.conf.$publichost"
					x=$((RANDOM%2+1))
					case $x in
						1)
							sed -i "s/\/TYPE\//active/g" "/etc/iked.conf.$vpnc_host"
							sed -i "s/\/TYPE\//passive/g" "/tmp/$vpnc_host/iked.conf.$publichost"
							
						;;
						2)
							sed -i "s/\/TYPE\//passive/g" "/etc/iked.conf.$vpnc_host"
							sed -i "s/\/TYPE\//active/g" "/tmp/$vpnc_host/iked.conf.$publichost"
						;;
					esac 
					sed -i "s/\/POPIP\//$vpnc_ip/g" "/tmp/$vpnc_host/iked.conf.$publichost"
					sed -i "s/\/POP\//$vpnc_host/g" "/tmp/$vpnc_host/iked.conf.$publichost"
					srcid=$(print $vpnc_host | cut -d . -f1)
					for a in $(dig ipsec20591.$domainname TXT +short @8.8.8.8 | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
						b=$(echo $a | cut -d : -f1)
						if [ "$b" = "$srcid" ]; then
							srcid=$(echo $a | cut -d : -f2)
						fi
					done
					sed -i "s/\/POPID\//$srcid/g" "/tmp/$vpnc_host/iked.conf.$publichost"
				fi
				sed -i "s/\/POPIP\//$vpnc_ip/g" "/etc/iked.conf.$vpnc_host"
				sed -i "s/\/POP\//$vpnc_host/g" "/etc/iked.conf.$vpnc_host"
				((i=i+1))
			done
			dyndnshost=$(dig vpnc.$domainname TXT +short @8.8.8.8 | sed 's/\"//g')
			if [[ ! -d "/tmp/$dyndnshost" ]]; then
				mkdir "/tmp/$dyndnshost"
			else
				rm -rf "/tmp/$dyndnshost"
				mkdir "/tmp/$dyndnshost"
			fi
			echo include \"/etc/iked.conf.$dyndnshost\" >> /etc/iked.conf
			install -o root -g wheel -m 0640 src/etc/iked.conf.edgeos "/etc/iked.conf.$dyndnshost"
			sed -i "s/\/POPIP\//$(dig $dyndnshost A +short | tail -n 1)/g" "/etc/iked.conf.$dyndnshost"
			sed -i "s/\/POP\//$dyndnshost/g" "/etc/iked.conf.$dyndnshost"
			cp src/edgeos/ipsec.conf "/tmp/$dyndnshost/"
			cp "/etc/iked/certs/$publichost.crt" "/tmp/$dyndnshost/"
			find /etc/ -type f -name "iked.*" | xargs -I {} 
			cleanold "/etc/" 
			rcctl start iked ||  error_exit "$LINENO: ERROR: IKED failed."
			;;
		"gre")	
			if [[ -e "/etc/hostname.gre0" ]]; then
				rm -rf /etc/hostname.gre?
			fi
			typeset -i i
			i=0
			for file in $(find /etc -maxdepth 1 -name "iked.conf.*") ; do
				install -o root -g wheel -m 0640 src/etc/hostname.gre-X- "/etc/hostname.gre$i"
				pophost=$(echo $file | sed "s/\/etc\/iked.conf.//")
				sed -i "s/\/POPHOST\//$pophost/g" "/etc/hostname.gre$i"
				sed -i "s/\/PUBLICIP\//$publicip/g" "/etc/hostname.gre$i"
				sed -i "s/\/X\//$i/g" "/etc/hostname.gre$i"
				count=$(dig $pophost A +short @8.8.8.8 | wc -l)
				if [[ $count -gt 1 ]]; then
					popip=$(dig $pophost A +short @8.8.8.8 | tail -n 1)
				else
					popip=$(dig $pophost A +short @8.8.8.8)
				fi
				sed -i "s/\/POPIP\//$popip/g" "/etc/hostname.gre$i"
				if [ $i -eq 0 ]; then
					typeset -i lastnet
					lastnet=$(dig gre7058.$domainname TXT +short @8.8.8.8 | sed 's/\"//g')
				else
					lastnet=$lastnet-4
				fi
				typeset -i grepopip
				grepopip=$lastnet-2
				sed -i "s/\/GREPOPIP\//10.10.10.$grepopip/g" "/etc/hostname.gre$i"
				typeset -i  grelocalip
				grelocalip=$lastnet-3
				sed -i "s/\/GRELOCALIP\//10.10.10.$grelocalip/g" "/etc/hostname.gre$i"
				if grep -q "ecp384" $file; then
					cat src/mikrotik/gre.rsc >> "/tmp/$pophost/$pophost.rsc"
					sed -i "s/\/GREPOPIP\//10.10.10.$grepopip\/32/g" "/tmp/$pophost/$pophost.rsc"
				fi
				if grep -q "ecp256" $file; then
					cp src/edgeos/scripts/ES-SRCID-_netwatch.sh "/tmp/$pophost/ES-${publichostname}_netwatch.sh" 
					cp src/edgeos/scripts/ES-SRCID--updown.sh "/tmp/$pophost/ES-$publichostname-updown.sh"
					cp src/edgeos/gre.sh "/tmp/$pophost/"
					sed -i "s/\/GREPOPIP\//10.10.10.$grepopip/g" "/tmp/$pophost/ES-${publichostname}_netwatch.sh"
					sed -i "s/\/GREPOPIP\//10.10.10.$grepopip/g" "/tmp/$pophost/gre.sh"
					sed -i "s/\/PUBLICHOSTNAME\//$publichostname/g" "/tmp/$pophost/ES-${publichostname}_netwatch.sh"
					typeset -i lasttun
					lasttun=$(dig gre18994.$domainname TXT +short @8.8.8.8 | sed 's/\"//g')
					lasttun=$lasttun+1
					sed -i "s/\/TUN\//tun$lasttun/g" "/tmp/$pophost/ES-${publichostname}_netwatch.sh"
					sed -i "s/\/TUN\//tun$lasttun/g" "/tmp/$pophost/ES-$publichostname-updown.sh"
					sed -i "s/\/TUN\//tun$lasttun/g" "/tmp/$pophost/gre.sh"
				fi
				i=$i+1
			done
			lastnet=$lastnet-4
			echo "update gre7058.$domainname TXT to $lastnet \
			      \n gre18994.$domainname TXT to $lasttun \n"
			for file in /etc/hostname.gre? ; do
				sh /etc/netstart $(echo $file | awk -F. '{print $2}')
			done
			cleanold "/etc/"
			;;
		"pf")
			for file in src/etc/pf.* ; do
				if [[ -e "$file" ]]; then
					install -o root -g wheel -m 0640  $file /etc/
				fi
			done 
			cleanold "/etc/"
			for vpnc_ip in $(dig vpnc.$domainname A +short @8.8.8.8); do
				echo "$vpnc_ip/32" >> /etc/pf.conf.table.ipsec
			done
			for file in $(find /tmp -name "*.rsc"); do
				cat src/mikrotik/firewall.rsc >> "$file"
			done
			find /etc -type f -maxdepth 1 | xargs -I {} sed -i "s/\/PUBV6\//${ipv6egress}/g" {}
			find /etc -type f -maxdepth 1 | xargs -I {} sed -i "s/\/PREFIX\//${ipv6prefix}/g" {}
			if [[ -e "/etc/mygate" ]]; then
				sh /etc/netstart vio0
				route add -inet6 default $(echo "/etc/mygate")
			fi
			pfctl -nf /etc/pf.conf	 
			#pfctl -f /etc/pf.conf
			;;
		"ospf")
			rcctl enable ospfd
			install -o root -g wheel -m 0600  src/etc/ospfd.conf /etc/
			cleanold "/etc/"
			rcctl start ospfd ||  error_exit "$LINENO: ERROR: OSPFD failed."
			;;
		"ntpd")
			install -o root -g wheel -m 0644  src/etc/ntpd.conf /etc/
			cleanold "/etc/"
			rcctl restart ntpd  ||  error_exit "$LINENO: ERROR: NTPD failed."
			;;		
	esac
}

configini=
if [[ ! -e "/tmp/config.ini" ]]; then
	touch "/tmp/config.ini"
else
	echo -n "Type 1 to use /tmp/config.ini "
	read configini 
fi

echo "changing installurl"
if [[ $configini -eq 1 ]]; then
	install -o root -g wheel -m 0644 src/etc/installurl /etc/
else
	ctrl=
	while [ -z $ctrl ]
	do
		echo -n 'Go ahead type 1 '
		read ctrl
		if [[ "$ctrl" -eq 1 ]]; then
			install -o root -g wheel -m 0644 src/etc/installurl /etc/
			echo "installurl:$ctrl" >> /tmp/config.ini
		else
			error_exit "$LINENO: EXIT FROM USER." 
		fi
	    
	done		
fi
echo "adding basic shell packages"
if [[ $configini -eq 1 ]]; then
	pkg "shell"
else
ctrl=
	while [ -z $ctrl ]
	do
		echo -n 'Go ahead type 1 '
		read ctrl
		if [[ "$ctrl" -eq 1 ]]; then
			pkg "shell"
			echo "shell:$ctrl" >> /tmp/config.ini
		else
			error_exit "$LINENO: EXIT FROM USER." 
		fi
	    
	done
fi

rcctl disable {sndiod,slaacd,check_quotas}
rcctl stop {sndiod,slaacd}

echo "configuring users"
if [[ $configini -eq 1 ]]; then
	if [ ! -d /root/Bin ]; then 
		mkdir /root/Bin
		chmod 700 /root/Bin
	fi
	if [ ! -d /root/Backups ]; then 
		mkdir /root/Backups
		chmod 700 /root/Backups
	fi
	if [ ! -d /home/taglio/Bin ]; then 
		mkdir /home/taglio/Bin 
		chown taglio:wheel /home/taglio/Bin
	fi
	
	configuration "users"
	configuration "scripts"
else
	ctrl=
	while [ -z $ctrl ]
	do
		echo -n 'Go ahead type 1 '
		read ctrl
		if [[ "$ctrl" -eq 1 ]]; then
			if [ ! -d /root/Bin ]; then 
				mkdir /root/Bin
				chmod 700 /root/Bin
			fi
			if [ ! -d /root/Backups ]; then 
				mkdir /root/Backups
				chmod 700 /root/Backups
			fi
			if [ ! -d /home/taglio/Bin ]; then 
				mkdir /home/taglio/Bin 
				chown taglio:wheel /home/taglio/Bin
			fi
			
			configuration "users"
			configuration "scripts"
			echo "users:$ctrl" >> /tmp/config.ini
		else
			error_exit "$LINENO: EXIT FROM USER." 
		fi
	    
	done
fi
if [[ $configini -eq 1 ]]; then
	hostname=$(cat /tmp/config.ini  | grep hostname |cut -d : -f2)
	find {src/mikrotik,src/openbsd,src/edgeos,src/etc,src/var/} -type f | xargs -I {} sed -i "s/\/HOSTNAME\//$hostname/g" {}
else
	hostname=
	while [ -z $hostname ]
	do
		echo -n 'Type the hostname '
		read hostname
		echo "hostname:$hostname" >> /tmp/config.ini
		find {src/mikrotik,src/openbsd,src/edgeos,src/etc,src/var/} -type f | xargs -I {} sed -i "s/\/HOSTNAME\//$hostname/g" {}
	done
fi
if [[ $configini -eq 1 ]]; then
	landomainname=$(cat /tmp/config.ini  | grep landomainname |cut -d : -f2)
	find {src/mikrotik,src/openbsd,src/edgeos,src/etc,src/var/} -type f | xargs -I {} sed -i "s/\/LANDOMAINNAME\//$landomainname/g" {}
else
	landomainname=
	while [ -z $landomainname ]
	do
		echo -n 'Type the LAN domain name '
		read landomainname
		echo "landomainname:$landomainname" >> /tmp/config.ini
		find {src/mikrotik,src/openbsd,src/edgeos,src/etc,src/var/} -type f | xargs -I {} sed -i "s/\/LANDOMAINNAME\//$landomainname/g" {}
	done
fi
if [[ $configini -eq 1 ]]; then
	routerid=$(cat /tmp/config.ini  | grep routerid |cut -d : -f2)
	find {src/mikrotik,src/openbsd,src/edgeos,src/etc,src/var/} -type f | xargs -I {} sed -i "s/\/ROUTERID\//$routerid/g" {}
else
	routerid=
	while [ -z $routerid ]
	do
		echo -n 'Type the routerid '
		read routerid
		echo "routerid:$routerid" >> /tmp/config.ini
		find {src/mikrotik,src/openbsd,src/edgeos,src/etc,src/var/} -type f | xargs -I {} sed -i "s/\/ROUTERID\//$routerid/g" {}
	done
fi
srcid=$(print $publichost | cut -d . -f1)
typeset -u publichostname=$srcid
domainname=$(print $publichost | sed "s/$srcid.//")
for a in $(dig ipsec20591.$domainname TXT +short @8.8.8.8 | sed "s/\"//g" | tr \; '\n' | sed '$d'); do
	b=$(echo $a | cut -d : -f1)
	if [ "$b" = "$srcid" ]; then
		srcid=$(echo $a | cut -d : -f2)
	fi
done
find {src/mikrotik,src/openbsd,src/edgeos,src/etc,src/var/} -type f | xargs -I {} sed -i "s/\/PUBLICHOST\//$publichost/g" {}
find {src/mikrotik,src/openbsd,src/edgeos,src/etc,src/var/} -type f | xargs -I {} sed -i "s/\/DOMAINNAME\//$domainname/g" {}
find {src/mikrotik,src/openbsd,src/edgeos,src/etc,src/var/} -type f | xargs -I {} sed -i "s/\/SRCID\//$srcid/g" {}
find {src/mikrotik,src/openbsd,src/edgeos,src/etc,src/var/} -type f | xargs -I {} sed -i "s/\/PUBLICHOSTNAME\//$publichostname/g" {}
find {src/mikrotik,src/openbsd,src/edgeos,src/etc,src/var/} -type f | xargs -I {} sed -i "s/\/PUBLICIP\//$publicip/g" {}
find {src/mikrotik,src/openbsd,src/edgeos,src/etc,src/var/} -type f | xargs -I {} sed -i "s/\/DYNDNS\//$dyndns/g" {}

echo "configuring basic"
if [[ $configini -eq 1 ]]; then
	configuration "basic" 
else
	ctrl=
	while [ -z $ctrl ]
	do
		echo -n 'Go ahead type 1 '
		read ctrl
		if [[ "$ctrl" -eq 1 ]]; then
			configuration "basic" 
			echo "basic:$ctrl" >> /tmp/config.ini
		else
			error_exit "$LINENO: EXIT FROM USER." 
		fi
	    
	done
fi
echo "configuring unbound"
if [[ $configini -eq 1 ]]; then
	configuration "unbound" "local"
else
	ctrl=
	while [ -z $ctrl ]
	do
		echo -n 'Go ahead type 1 '
		read ctrl
		if [[ "$ctrl" -eq 1 ]]; then
			configuration "unbound" "local"
			echo "unbound:$ctrl" >> /tmp/config.ini
		else
			error_exit "$LINENO: EXIT FROM USER." 
		fi
	    
	done
fi
echo -n "configuring ssh \n"
if [[ $configini -eq 1 ]]; then
	configuration "ssh" "public"
else
	ctrl=
	while [ -z $ctrl ]
	do
		echo -n 'Go ahead type 1 '
		read ctrl
		if [[ "$ctrl" -eq 1 ]]; then
			configuration "ssh" "public"
			echo "ssh:$ctrl" >> /tmp/config.ini
		else
			error_exit "$LINENO: EXIT FROM USER." 
		fi
	done
fi
echo -n "configuring ipsec \
	\nplease add ${publicip}/32 to \
	\n/etc/pf.conf/table.ipsec \
	\nto the others nodes and reload them! \
	\n"
if [[ $configini -eq 1 ]]; then
	configuration "ipsec" 
else
	ctrl=
	while [ -z $ctrl ]
	do
		echo -n 'Go ahead type 1 '
		read ctrl
		if [[ "$ctrl" -eq 1 ]]; then
			configuration "ipsec" 
			echo "ipsec:$ctrl" >> /tmp/config.ini
		else
			error_exit "$LINENO: EXIT FROM USER." 
		fi
	done
fi
if [[ $configini -eq 1 ]]; then
	configuration "gre" 
else
	echo -n "configuring gre interfaces \
		\n"
	ctrl=
	while [ -z $ctrl ]
	do
		echo -n 'Go ahead type 1 '
		read ctrl
		if [[ "$ctrl" -eq 1 ]]; then
			configuration "gre" 
			echo "gre:$ctrl" >> /tmp/config.ini
		else
			error_exit "$LINENO: EXIT FROM USER." 
		fi
	done
fi

ipv6ctrl=
ipv6egress=
ipv6prefix=
ipv6defrouter=


while [ -z $ipv6ctrl ]
do
	echo -n 'Is the IPv6 address on the egress interface static or dynamic?\n'
	read ipv6ctrl
	echo "ipv6ctrl:$ipv6ctrl" >> /tmp/config.ini
	case $ipv6ctrl in
		"static")
			echo -n 'Type the IPv6 address without prefixlen '
			read ipv6egress
			echo -n 'Type the prefixlen '
			read ipv6prefix
			echo -n 'Type the IPv6 default route '
			read ipv6defrouter
			echo "ipv6egress:$ipv6egress" >> /tmp/config.ini
			echo "ipv6prefix:$ipv6prefix" >> /tmp/config.ini
			echo "ipv6defrouter:$ipv6defrouter" >> /tmp/config.ini
			;;
		"dynamic")
			ipv6egress=$(ifconfig egress | grep inet6 | grep -v fe80 |cut -d ' ' -f2)
			echo "ipv6egress:$ipv6egress" >> /tmp/config.ini
			;;
		*)
			echo -n "Please type static or dynamic \n"
			continue
			;;
	esac	
	if [[ ! -z ipv6defrouter ]]; then
		install -o root -g wheel -m 0640 src/etc/hostname-ipv6s.vio0 /etc/hostname.vio0
		install -o root -g wheel -m 0640 src/etc/mygate-ipv6s /etc/mygate
		sed -i "s/\/ROUTEV6\//$ipv6defrouter/g" /etc/mygate
	fi
	
done

echo -n "configuring PF firewall and others environments \
	\n"
ctrl=
while [ -z $ctrl ]
do
	echo -n 'Go ahead type 1 '
	read ctrl
	if [[ "$ctrl" -eq 1 ]]; then
		configuration "pf" 
		echo "pf:$pf" >> /tmp/config.ini
	else
		error_exit "$LINENO: EXIT FROM USER." 
	fi
done


